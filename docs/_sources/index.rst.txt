.. divina documentation master file, created by

.. module:: divina

********************
divina
********************

**Date**: |today| **Version**: |version|

**Useful links**:
`Binary Installers <https://pypi.org/project/divina>`__ |
`Source Repository <https://github.com/secrettoad/divina>`__ |
`Issues & Ideas <https://github.com/secrettoad/divina/issues>`__ |
`Q&A Support <https://stackoverflow.com/questions/tagged/divina>`__

.. toctree::
   :maxdepth: 1

   cli

:mod:`divina` is an open source, BSD3-licensed library providing scalable and hyper-interpretable causal forecasting capabilities written in `Python <https://www.python.org/>`__ and consumable via CLI.

The aim of :mod:`divina` is to deliver performance-oriented and hypter-interpretable exogenous time series forecasting models by producing accurate and bootstrapped predictions, local and overridable factor summaries and easily configurable feature engineering and experiment management capabilities.

Installation
************

:mod:`divina` is available via pypi and can be install using the python package manager pip as shown below.

.. code-block:: bash

    pip install divina

Use
************

:mod:`divina` is consumable via CLI, or command line interface. In order to run an experiment with :mod:`divina`, first create your experiment definition and then run the below command in your console of choice.

.. code-block:: bash

    divina experiment /path/to/my/experiment_definition.json

Experiment Definitions
************

Experiment configuration with :mod:`divina` has been abstracted completely to a JSON file called the experiment definition that the user supplies to the :mod:`divina` cli. For an exhaustive example of an experiment definition with every available option described in detail, check out the experiment definition documentation

Getting Started
************

.. code-block:: json

    {
      "forecast_definition": {
        "target": "<string>",
        "time_index": "<string>",
        "include_features": ["<string>"],
        "drop_features": ["<string>"],
        "time_validation_splits": ["<string>"],
        "forecast_end": "<string>",
        "forecast_freq": "<string>",
        "bootstrap_sample": "<integer>",
        "signal_dimensions": ["<string>"],
        "time_horizons": ["<integer>"],
        "encode_features": ["<string>"],
        "scenarios": [
            {
              "feature": "<string>",
              "values": ["<string, integer, float>"],
              "start": "<string>",
              "end": "<string>"
            }
        ],
        "dataset_directory": "<string>",
        "link_function": "<string>",
        "confidence_intervals": ["<integer>", "<integer>"],
        "joins": [
          {
            "dataset_directory": "<string>",
            "join_on": ["<string>", "<string>"],
            "as": "<string>"
          }
        ]
      }
    }



.. code-block:: json

    {
        "forecast_definition": {
            "time_index": "Date",
            "target": "Sales",
            "include_features": ["Store", "Promo", "Weekday",
                                 "LastDayOfMonth"],
            "time_validation_splits": ["2015-07-18"],
            "forecast_end": "2015-08-30",
            "bootstrap_sample": 5,
            "signal_dimensions": ["Store"],
            "time_horizons": [2],
            "forecast_freq": "D",
            "encode_features": ["Weekday", "Store"],
            "scenarios": [{"feature": "Promo", "values": [0, 1], "start": "2015-08-01", "end": "2016-01-01"}],
            "dataset_directory": "divina://retail_sales",
            "link_function": "log",
            "confidence_intervals": [100, 0],
            "joins": [
                {
                    "dataset_directory": "divina://time",
                    "join_on": ["Date", "Date"],
                    "as": "time"
                }
            ]
        }
    }

**Experiment Persistence**

Experiment artifacts are persisted either locally or to S3 depending on the use of the `--local` flag when running the experiment command and will produce a local output structure as shown below.

    experiment path
      |- models
      |    |
      |    \- h_{forecast horizon}
      |           |-fit_model.joblib
      |           |-bootstrap
      |                |
      |                |- bootstrap_model_{random seed}
      |
      |- forecast
      |    |
      |    |- common_meta.parquet
      |    |- forecast_partition_0_meta.parquet
      |    |- forecast_partition_0.parquet
      |    \  ...
      |
      |- validation
           |
           |- metrics.json
           \- {validation split}
                  |
                  |- validation_partition_0_meta.parquet
                  |- validation_partition_0.parquet
                  \  ...
