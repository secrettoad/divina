import pytest
import pandas as pd
import numpy as np
from dask.distributed import Client
import os
import s3fs
from unittest.mock import patch
import shutil
from dask_ml.linear_model import LinearRegression
import dask.dataframe as ddf
import boto3
from dask_cloudprovider.aws import EC2Cluster
from pandas import Timestamp
import fsspec


@pytest.fixture()
def test_bucket():
    return "s3://divina-test-2"


@pytest.fixture()
def random_state():
    return 11


@pytest.fixture()
def setup_teardown_test_bucket_contents(s3_fs, test_bucket):
    fsspec.filesystem("s3").invalidate_cache()
    try:
        s3_fs.rm(test_bucket, recursive=True)
    except FileNotFoundError:
        pass
    s3_fs.mkdir(
        test_bucket,
        region_name=os.environ["AWS_DEFAULT_REGION"],
        acl="private",
    )
    yield
    try:
        s3_fs.rm(test_bucket, recursive=True)
    except FileNotFoundError:
        pass


@pytest.fixture(autouse=True)
def setup_teardown_test_directory(s3_fs, test_bucket):
    try:
        os.mkdir("divina-test")
    except FileExistsError:
        shutil.rmtree("divina-test")
        os.mkdir("divina-test")
    yield
    try:
        shutil.rmtree("divina-test")
    except FileNotFoundError:
        pass


@patch.dict(os.environ, {"AWS_SHARED_CREDENTIALS_FILE": "~/.aws/credentials"})
@pytest.fixture()
def divina_session():
    return boto3.Session()


@pytest.fixture(scope="session")
def s3_fs():
    return s3fs.S3FileSystem()


@pytest.fixture(scope="session")
def dask_client(request):
    client = Client()
    request.addfinalizer(lambda: client.close())
    yield client
    client.shutdown()


@pytest.fixture(scope="session")
def dask_cluster_ip():
    return "3.145.61.65:8786"


@pytest.fixture(scope="session")
def dask_client_remote(request, dask_cluster_ip):
    if dask_cluster_ip:
        client = Client(dask_cluster_ip)
        yield client
    else:
        cluster = EC2Cluster(
            key_name="divina2",
            security=False,
            docker_image="jhurdle/divina:test",
            debug=False,
            env_vars={
                "AWS_SECRET_ACCESS_KEY": os.environ["AWS_SECRET_ACCESS_KEY"],
                "AWS_ACCESS_KEY_ID": os.environ["AWS_ACCESS_KEY_ID"],
                "AWS_DEFAULT_REGION": os.environ["AWS_DEFAULT_REGION"],
            },
            auto_shutdown=False,
        )
        cluster.scale(5)
        client = Client(cluster)
        request.addfinalizer(lambda: client.close())
        yield client
        client.shutdown()


@pytest.fixture()
def fd_no_dataset_directory():
    return {
        "forecast_definition": {
            "target": "c",
            "time_index": "a",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_invalid_model():
    return {
        "forecast_definition": {
            "target": "c",
            "time_index": "a",
            "dataset_directory": "divina-test/dataset/test1",
            "model": "scikitlearn.linear_models.linearRegression",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_no_time_index():
    return {
        "forecast_definition": {
            "target": "c",
            "dataset_directory": "divina-test/dataset/test1",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_no_target():
    return {
        "forecast_definition": {
            "time_index": "a",
            "dataset_directory": "divina-test/dataset/test1",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_time_validation_splits_not_list():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": "1970-01-01 00:00:08",
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def fd_time_horizons_not_list():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": 1,
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def fd_time_horizons_range_not_tuple():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [[1, 60]],
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def test_model_1(test_df_1, random_state, test_fd_1):
    params = [42.29402239932083, 0.7353679291665149, 36.998065910590576, -14.246342053030085]
    intercept = -31.99476098613591
    features = ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]']

    model = LinearRegression()
    model.fit(
        ddf.from_pandas(pd.DataFrame([np.array(params) + c for c in range(0, 2)]), npartitions=1).to_dask_array(
            lengths=True),
        ddf.from_pandas(pd.Series([intercept, intercept]), npartitions=1).to_dask_array(lengths=True))
    model.coef_ = np.array(params)
    model.intercept_ = intercept
    model._coef = np.array(params + [intercept])
    return (model, {"features": features})


@pytest.fixture()
def test_model_retail(test_df_1, random_state, test_fd_1):
    params = [7.050157873697638, 0.30947457181497506, 0.3422985868203293, -7.070543102051501, 0.9749912600061462,
              1.074164343651558, 0.9762676801965333, 0.9541432629294214, 1.0435205613507967]
    intercept = 0.9861590984316643
    features = ['Promo', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                'Weekday_5.0', 'Weekday_4.0']
    model = LinearRegression()
    model.fit(
        ddf.from_pandas(pd.DataFrame([np.array(params) + c for c in range(0, 2)]), npartitions=1).to_dask_array(
            lengths=True),
        ddf.from_pandas(pd.Series([intercept, intercept]), npartitions=1).to_dask_array(lengths=True))
    model.coef_ = np.array(params)
    model.intercept_ = intercept
    model._coef = np.array(params + [intercept])
    return (model, {"features": features})


@pytest.fixture()
def test_params_1(test_model_1):
    return test_model_1[1]


@pytest.fixture()
def test_bootstrap_models(test_df_1, random_state, test_fd_1):
    params = [[43.53071027441953, 0.6824085144938496, 35.53552539883961, -15.644533586854198],
              [43.289095808310236, 0.7975091437642748, 35.21697740771039, -5.108181385334677],
              [42.91896900218957, 0.8103922586740234, 34.96192027758719, -4.815717516613729],
              [45.28174982254647, 0.5496547154243477, 33.71704394265478, -16.59380700949619],
              [45.522881003151184, 0.6510965285161292, 33.32690985921098, -4.650073040493704]]
    intercepts = [-30.61752065163089, -35.07490345451706, -35.055431021436135, -26.755865504023124, -33.350348213391186]
    features = [['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'], ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'],
                ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'], ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'],
                ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]']]
    seeds = range(random_state, random_state + test_fd_1["forecast_definition"]["bootstrap_sample"])
    bootstrap_models = {}

    for j, i, p, f, seed in zip(range(0, len(seeds)), intercepts, params, features, seeds):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(pd.DataFrame([np.array(params[j]) + c for c in range(0, len(seeds))]),
                            npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        bootstrap_models[seed] = (model, {"features": f})
    return bootstrap_models


@pytest.fixture()
def test_bootstrap_models_retail(test_df_1, random_state, test_fd_1):
    params = [[6.763073504290286, 0.42265724404130034, 0.07167536075886113, -6.788678904584761, 1.2021007990261217,
               1.2291924822766511, 1.1388610366022127, 1.1570092917842743, 1.3065005322389032],
              [6.791200679331312, 0.3499721190131754, 0.119286495565219, -6.8136571412822535, 1.185978147336764,
               1.4956404478784229, 1.1545154158302573, 1.150638062347802, 1.2815141965579406],
              [7.162074064352943, 0.3067052280278455, -7.18385797306061, 0.7701109578710519, 0.8989291099306109,
               0.8389450190997614, 0.8168580400873118, 1.0944891089481545],
              [7.185630450217498, 0.31696663818817133, 0.1550002681578511, -7.207810287619281, 0.8213060652230622,
               1.196032032817345, 0.7810878060729215, 0.7845222409577279, 0.8804843565581505],
              [6.819204170269461, 0.3051524274093768, 0.08826167691022106, -6.843749096300429, 1.175285509333202,
               1.2898981597384078, 1.1490328795534523, 1.1352667121758786, 1.2514266533011014]]
    intercepts = [1.1751707422379885, 1.2112035607698082, 0.8158495109874592, 0.824954065530505, 1.1939686811922172]
    features = [['Promo', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                 'Weekday_5.0', 'Weekday_4.0'],
                ['Promo', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                 'Weekday_5.0', 'Weekday_4.0'],
                ['Promo', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0', 'Weekday_5.0',
                 'Weekday_4.0'],
                ['Promo', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                 'Weekday_5.0', 'Weekday_4.0'],
                ['Promo', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                 'Weekday_5.0', 'Weekday_4.0']]
    seeds = range(random_state, random_state + test_fd_1["forecast_definition"]["bootstrap_sample"])
    bootstrap_models = {}

    for j, i, p, f, seed in zip(range(0, len(seeds)), intercepts, params, features, seeds):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(pd.DataFrame([np.array(params[j]) + c for c in range(0, len(seeds))]),
                            npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        bootstrap_models[seed] = (model, {"features": f})
    return bootstrap_models


@pytest.fixture()
def test_validation_models(test_df_1, random_state, test_fd_1):
    params = [[4.086805634357628, 0.7618639411983616, -1.6591807041382545]]
    intercepts = [1.6591672730002625]
    features = [['b', 'b_(5, 10]', 'b_(15, inf]']]
    splits = test_fd_1["forecast_definition"]["time_validation_splits"]
    validation_models = {}

    for j, i, p, f, split in zip(range(0, len(splits)), intercepts, params, features, splits):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(
                pd.DataFrame([np.array(params[j]) + c for c in range(1, len(splits) + 1)] + [np.array(params[j])]),
                npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts + [i]), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        validation_models[split] = (model, {"features": f})
    return validation_models


@pytest.fixture()
def test_validation_models_retail(test_df_1, random_state, test_fd_retail):
    params = [[7.021967433701373, 0.28424989983424825, -7.057913758653681, 0.7473841535019675, 0.7948494482076536,
               0.778278526583536, 0.7703382366034516, 0.7259526409274895]]
    intercepts = [0.780173359234719]
    features = [['Promo', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0', 'Weekday_5.0',
                 'Weekday_4.0']]
    splits = test_fd_retail["forecast_definition"]["time_validation_splits"]
    validation_models = {}

    for j, i, p, f, split in zip(range(0, len(splits)), intercepts, params, features, splits):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(
                pd.DataFrame([np.array(params[j]) + c for c in range(1, len(splits) + 1)] + [np.array(params[j])]),
                npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts + [i]), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        validation_models[split] = (model, {"features": f})
    return validation_models


@pytest.fixture()
def test_params_2(test_model_1):
    return test_model_1[1]


@pytest.fixture()
def test_metrics_1():
    return {'splits': {'1970-01-01 00:00:07': {'time_horizons': {'1': {'mae': 19.349425665160247}}}}}


@pytest.fixture()
def test_metrics_retail():
    return {'splits': {'2015-07-18': {'time_horizons': {'2': {'mae': 2315.2067949209895}}}}}


@pytest.fixture()
def test_val_predictions_1():
    df = pd.DataFrame(
        [[Timestamp('1970-01-01 00:00:01'), 8.522536459806267], [Timestamp('1970-01-01 00:00:04'), 20.983251731325122],
         [Timestamp('1970-01-01 00:00:05'), 17.173932025333315], [Timestamp('1970-01-01 00:00:06'), 6.236944636211182],
         [Timestamp('1970-01-01 00:00:07'), 42.31544208487925]]
    )
    df.columns = ['a', 'c_h_1_pred']
    return df


@pytest.fixture()
def test_val_predictions_retail():
    df = pd.DataFrame([[Timestamp('2015-07-18 00:00:00'), 2315.7487354303003],
                       [Timestamp('2015-07-19 00:00:00'), -0.03530792801352488],
                       [Timestamp('2015-07-20 00:00:00'), 2480.9923458823855],
                       [Timestamp('2015-07-21 00:00:00'), 2440.2023426122096],
                       [Timestamp('2015-07-22 00:00:00'), 2420.895241542124],
                       [Timestamp('2015-07-23 00:00:00'), 2365.9360390548973],
                       [Timestamp('2015-07-24 00:00:00'), 2444.832397723627],
                       [Timestamp('2015-07-25 00:00:00'), 2315.7487354303003],
                       [Timestamp('2015-07-26 00:00:00'), -0.03530792801352488],
                       [Timestamp('2015-07-27 00:00:00'), 3296.9844289378193],
                       [Timestamp('2015-07-28 00:00:00'), 3242.784102387845],
                       [Timestamp('2015-07-29 00:00:00'), 3217.1295032498983],
                       [Timestamp('2015-07-30 00:00:00'), 3144.101641447498],
                       [Timestamp('2015-07-31 00:00:00'), 3248.936357324456]])
    df.columns = ['Date', 'Sales_h_2_pred']
    return df


@pytest.fixture()
def test_forecast_1():
    df = pd.DataFrame(
        [[Timestamp('1970-01-01 00:00:05'), 15.0, 18.0, 0, 0, 0, 1, 21.329780350682647, 634.4103359898124, 0.0, 0.0,
          -14.246342053030085, 23.14931734019639, 20.1768295102573, 20.019421860863787, 26.770705049888566,
          21.938980717501934, 23.14931734019639],
         [Timestamp('1970-01-01 00:00:06'), 5.0, 6.0, 0, 1, 0, 0, 31.72451999212332, 211.47011199660415, 0.0,
          36.998065910590576, -0.0, 31.298219260034585, 42.168460141796935, 42.15521277894596, 31.43621639017202,
          44.12829060523813, 42.168460141796935],
         [Timestamp('1970-01-01 00:00:07'), 48.0, 54.0, 0, 0, 0, 1, 45.59692201317764, 2030.1130751674, 0.0, 0.0,
          -14.246342053030085, 45.66879831849342, 46.49463125447837, 46.76236639710656, 44.90931065889205,
          43.425166158534196, 46.41273308192788],
         [Timestamp('1970-01-01 00:00:10'), 0.0, 84.0, 1, 0, 0, 0, 79.2920883099114, 0.0, 0.7353679291665149, 0.0, -0.0,
          79.06623567325914, 78.50607321602062, 77.88088927977677, 78.99879376520126, 78.84979086236217,
          79.06623567325914],
         [Timestamp('1970-01-01 00:00:10'), 1.0, 84.0, 1, 0, 0, 0, 80.02745623907792, 42.29402239932083,
          0.7353679291665149, 0.0, -0.0, 79.74864418775299, 79.3035823597849, 78.6912815384508, 79.54844848062561,
          79.5008873908783, 79.74864418775299],
         [Timestamp('1970-01-01 00:00:10'), 2.0, 84.0, 1, 0, 0, 0, 80.76282416824444, 84.58804479864166,
          0.7353679291665149, 0.0, -0.0, 80.43105270224684, 80.10109150354917, 79.50167379712481, 80.09810319604995,
          80.15198391939443, 80.43105270224684],
         [Timestamp('1970-01-01 00:00:10'), 3.0, 84.0, 1, 0, 0, 0, 81.49819209741095, 126.8820671979625,
          0.7353679291665149, 0.0, -0.0, 81.11346121674069, 80.89860064731344, 80.31206605579884, 80.6477579114743,
          80.80308044791056, 81.11346121674069],
         [Timestamp('1970-01-01 00:00:10'), 4.0, 84.0, 1, 0, 0, 0, 82.23356002657746, 169.17608959728332,
          0.7353679291665149, 0.0, -0.0, 81.79586973123455, 81.69610979107772, 81.12245831447287, 81.19741262689865,
          81.45417697642668, 81.79586973123455],
         [Timestamp('1970-01-01 00:00:10'), 5.0, 84.0, 0, 1, 0, 0, 31.72451999212332, 211.47011199660415, 0.0,
          36.998065910590576, -0.0, 31.298219260034585, 42.168460141796935, 42.15521277894596, 31.43621639017202,
          44.12829060523813, 42.168460141796935]]
    )
    df.columns = ['a', 'b', 'c', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(10, 15]', 'b_(15, inf]',
                  'c_h_1_pred', 'factor_b', 'factor_b_(-inf, 5]', 'factor_b_(5, 10]',
                  'factor_b_(15, inf]', 'c_h_1_pred_b_11', 'c_h_1_pred_b_12',
                  'c_h_1_pred_b_13', 'c_h_1_pred_b_14', 'c_h_1_pred_b_15',
                  'c_h_1_pred_c_90']
    return df


@pytest.fixture()
def test_forecast_retail():
    df = pd.DataFrame([[3650.0, Timestamp('2015-07-07 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255,
                        0.0, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474,
                        2822.453599119718, 2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [3797.0, Timestamp('2015-07-08 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914,
                        2811.5272677877915, 2917.8124123658004, 2892.2991117357165, 2847.280854880882,
                        2750.998891002914, 2992.807107726506],
                       [3897.0, Timestamp('2015-07-09 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213,
                        0.0, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516,
                        2912.6994070111336, 2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [3808.0, Timestamp('2015-07-10 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053,
                        2987.1335482034237, 2914.870189019236, 3011.6775558039753, 3019.4854771171617,
                        2801.4357998938053, 3090.207196665421],
                       [3530.0, Timestamp('2015-07-11 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404,
                        3204.793356619438, 3851.8298116432948, 3183.7045691829635, 3198.119272527163,
                        3183.7045691829635, 3851.8298116432948],
                       [0.0, Timestamp('2015-07-12 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [5054.0, Timestamp('2015-07-13 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [5042.0, Timestamp('2015-07-14 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [4767.0, Timestamp('2015-07-15 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [4427.0, Timestamp('2015-07-16 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [4852.0, Timestamp('2015-07-17 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 0, 1, 4211.415621452499,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 4275.548297133901,
                        4239.245125251743, 3961.4936012916623, 4135.2760365362765, 4097.290763710644,
                        3961.4936012916623, 4275.548297133901],
                       [4406.0, Timestamp('2015-07-18 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404,
                        3204.793356619438, 3851.8298116432948, 3183.7045691829635, 3198.119272527163,
                        3183.7045691829635, 3851.8298116432948],
                       [0.0, Timestamp('2015-07-19 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [4395.0, Timestamp('2015-07-20 00:00:00'), 1, 0.0, 0, 0, 0, 1, 0, 0, 0, 0, 3374.579247095705,
                        0.0, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 2956.992141480575,
                        3970.2696244807776, 3167.467065261235, 4365.261731753145, 3323.59230324909, 2956.992141480575,
                        4365.261731753145],
                       [3558.0, Timestamp('2015-07-21 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255,
                        0.0, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474,
                        2822.453599119718, 2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [3464.0, Timestamp('2015-07-22 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914,
                        2811.5272677877915, 2917.8124123658004, 2892.2991117357165, 2847.280854880882,
                        2750.998891002914, 2992.807107726506],
                       [3769.0, Timestamp('2015-07-23 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213,
                        0.0, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516,
                        2912.6994070111336, 2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [3706.0, Timestamp('2015-07-24 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053,
                        2987.1335482034237, 2914.870189019236, 3011.6775558039753, 3019.4854771171617,
                        2801.4357998938053, 3090.207196665421],
                       [4364.0, Timestamp('2015-07-25 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623,
                        0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404,
                        3204.793356619438, 3851.8298116432948, 3183.7045691829635, 3198.119272527163,
                        3183.7045691829635, 3851.8298116432948],
                       [0.0, Timestamp('2015-07-26 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [6102.0, Timestamp('2015-07-27 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [5011.0, Timestamp('2015-07-28 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [4782.0, Timestamp('2015-07-29 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [5020.0, Timestamp('2015-07-30 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [5263.0, Timestamp('2015-07-31 00:00:00'), 1, 1.0, 1, 0, 0, 0, 0, 0, 0, 1, 5930.84237406451,
                        7.050157873697638, 0.30947457181497506, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967,
                        4593.323741763326, 4776.453078325122, 3961.4936012916623, 4828.7569385270035, 4475.456066533263,
                        3961.4936012916623, 5930.84237406451],
                       [np.NaN, Timestamp('2015-08-01 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404, 3204.793356619438,
                        3851.8298116432948, 3183.7045691829635, 3198.119272527163, 3183.7045691829635,
                        3851.8298116432948],
                       [np.NaN, Timestamp('2015-08-01 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 1, 0, 4460.110508079211,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 4875.7353073275335,
                        4548.110484416875, 5234.765821467297, 4371.461688633561, 4339.666778878291, 4339.666778878291,
                        5234.765821467297],
                       [np.NaN, Timestamp('2015-08-02 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [np.NaN, Timestamp('2015-08-02 00:00:00'), 1, 1.0, 0, 1, 0, 0, 0, 0, 0, 0, 0.3352110155731161,
                        7.050157873697638, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4874330421544566,
                        0.3875167755644084, 0.3296574056570382, 0.34284003572582356, 0.3239338597274663,
                        0.3239338597274663, 0.4874330421544566],
                       [np.NaN, Timestamp('2015-08-03 00:00:00'), 1, 0.0, 0, 0, 0, 1, 0, 0, 0, 0, 3374.579247095705, 0.0,
                        0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 2956.992141480575, 3970.2696244807776,
                        3167.467065261235, 4365.261731753145, 3323.59230324909, 2956.992141480575, 4365.261731753145],
                       [np.NaN, Timestamp('2015-08-03 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [np.NaN, Timestamp('2015-08-04 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255, 0.0,
                        0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474, 2822.453599119718,
                        2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [np.NaN, Timestamp('2015-08-04 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [np.NaN, Timestamp('2015-08-05 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914, 2811.5272677877915,
                        2917.8124123658004, 2892.2991117357165, 2847.280854880882, 2750.998891002914,
                        2992.807107726506],
                       [np.NaN, Timestamp('2015-08-05 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [np.NaN, Timestamp('2015-08-06 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213, 0.0,
                        0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516, 2912.6994070111336,
                        2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [np.NaN, Timestamp('2015-08-06 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [np.NaN, Timestamp('2015-08-07 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053, 2987.1335482034237,
                        2914.870189019236, 3011.6775558039753, 3019.4854771171617, 2801.4357998938053,
                        3090.207196665421],
                       [np.NaN, Timestamp('2015-08-07 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 0, 1, 4211.415621452499,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 4275.548297133901,
                        4239.245125251743, 3961.4936012916623, 4135.2760365362765, 4097.290763710644,
                        3961.4936012916623, 4275.548297133901],
                       [np.NaN, Timestamp('2015-08-08 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404, 3204.793356619438,
                        3851.8298116432948, 3183.7045691829635, 3198.119272527163, 3183.7045691829635,
                        3851.8298116432948],
                       [np.NaN, Timestamp('2015-08-08 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 1, 0, 4460.110508079211,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 4875.7353073275335,
                        4548.110484416875, 5234.765821467297, 4371.461688633561, 4339.666778878291, 4339.666778878291,
                        5234.765821467297],
                       [np.NaN, Timestamp('2015-08-09 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [np.NaN, Timestamp('2015-08-09 00:00:00'), 1, 1.0, 0, 1, 0, 0, 0, 0, 0, 0, 0.3352110155731161,
                        7.050157873697638, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4874330421544566,
                        0.3875167755644084, 0.3296574056570382, 0.34284003572582356, 0.3239338597274663,
                        0.3239338597274663, 0.4874330421544566],
                       [np.NaN, Timestamp('2015-08-10 00:00:00'), 1, 0.0, 0, 0, 0, 1, 0, 0, 0, 0, 3374.579247095705, 0.0,
                        0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 2956.992141480575, 3970.2696244807776,
                        3167.467065261235, 4365.261731753145, 3323.59230324909, 2956.992141480575, 4365.261731753145],
                       [np.NaN, Timestamp('2015-08-10 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [np.NaN, Timestamp('2015-08-11 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255, 0.0,
                        0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474, 2822.453599119718,
                        2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [np.NaN, Timestamp('2015-08-11 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [np.NaN, Timestamp('2015-08-12 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914, 2811.5272677877915,
                        2917.8124123658004, 2892.2991117357165, 2847.280854880882, 2750.998891002914,
                        2992.807107726506],
                       [np.NaN, Timestamp('2015-08-12 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [np.NaN, Timestamp('2015-08-13 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213, 0.0,
                        0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516, 2912.6994070111336,
                        2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [np.NaN, Timestamp('2015-08-13 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [np.NaN, Timestamp('2015-08-14 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053, 2987.1335482034237,
                        2914.870189019236, 3011.6775558039753, 3019.4854771171617, 2801.4357998938053,
                        3090.207196665421],
                       [np.NaN, Timestamp('2015-08-14 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 0, 1, 4211.415621452499,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 4275.548297133901,
                        4239.245125251743, 3961.4936012916623, 4135.2760365362765, 4097.290763710644,
                        3961.4936012916623, 4275.548297133901],
                       [np.NaN, Timestamp('2015-08-15 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404, 3204.793356619438,
                        3851.8298116432948, 3183.7045691829635, 3198.119272527163, 3183.7045691829635,
                        3851.8298116432948],
                       [np.NaN, Timestamp('2015-08-15 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 1, 0, 4460.110508079211,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 4875.7353073275335,
                        4548.110484416875, 5234.765821467297, 4371.461688633561, 4339.666778878291, 4339.666778878291,
                        5234.765821467297],
                       [np.NaN, Timestamp('2015-08-16 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [np.NaN, Timestamp('2015-08-16 00:00:00'), 1, 1.0, 0, 1, 0, 0, 0, 0, 0, 0, 0.3352110155731161,
                        7.050157873697638, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4874330421544566,
                        0.3875167755644084, 0.3296574056570382, 0.34284003572582356, 0.3239338597274663,
                        0.3239338597274663, 0.4874330421544566],
                       [np.NaN, Timestamp('2015-08-17 00:00:00'), 1, 0.0, 0, 0, 0, 1, 0, 0, 0, 0, 3374.579247095705, 0.0,
                        0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 2956.992141480575, 3970.2696244807776,
                        3167.467065261235, 4365.261731753145, 3323.59230324909, 2956.992141480575, 4365.261731753145],
                       [np.NaN, Timestamp('2015-08-17 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [np.NaN, Timestamp('2015-08-18 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255, 0.0,
                        0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474, 2822.453599119718,
                        2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [np.NaN, Timestamp('2015-08-18 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [np.NaN, Timestamp('2015-08-19 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914, 2811.5272677877915,
                        2917.8124123658004, 2892.2991117357165, 2847.280854880882, 2750.998891002914,
                        2992.807107726506],
                       [np.NaN, Timestamp('2015-08-19 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [np.NaN, Timestamp('2015-08-20 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213, 0.0,
                        0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516, 2912.6994070111336,
                        2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [np.NaN, Timestamp('2015-08-20 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [np.NaN, Timestamp('2015-08-21 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053, 2987.1335482034237,
                        2914.870189019236, 3011.6775558039753, 3019.4854771171617, 2801.4357998938053,
                        3090.207196665421],
                       [np.NaN, Timestamp('2015-08-21 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 0, 1, 4211.415621452499,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 4275.548297133901,
                        4239.245125251743, 3961.4936012916623, 4135.2760365362765, 4097.290763710644,
                        3961.4936012916623, 4275.548297133901],
                       [np.NaN, Timestamp('2015-08-22 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404, 3204.793356619438,
                        3851.8298116432948, 3183.7045691829635, 3198.119272527163, 3183.7045691829635,
                        3851.8298116432948],
                       [np.NaN, Timestamp('2015-08-22 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 1, 0, 4460.110508079211,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 4875.7353073275335,
                        4548.110484416875, 5234.765821467297, 4371.461688633561, 4339.666778878291, 4339.666778878291,
                        5234.765821467297],
                       [np.NaN, Timestamp('2015-08-23 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [np.NaN, Timestamp('2015-08-23 00:00:00'), 1, 1.0, 0, 1, 0, 0, 0, 0, 0, 0, 0.3352110155731161,
                        7.050157873697638, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4874330421544566,
                        0.3875167755644084, 0.3296574056570382, 0.34284003572582356, 0.3239338597274663,
                        0.3239338597274663, 0.4874330421544566],
                       [np.NaN, Timestamp('2015-08-24 00:00:00'), 1, 0.0, 0, 0, 0, 1, 0, 0, 0, 0, 3374.579247095705, 0.0,
                        0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 2956.992141480575, 3970.2696244807776,
                        3167.467065261235, 4365.261731753145, 3323.59230324909, 2956.992141480575, 4365.261731753145],
                       [np.NaN, Timestamp('2015-08-24 00:00:00'), 1, 1.0, 0, 0, 0, 1, 0, 0, 0, 0, 4598.931951263466,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.9749912600061462, 0.0, 0.0, 0.0, 0.0, 4512.9290099218615,
                        5634.342729708068, 4304.757684029123, 5993.688590387939, 4509.912577707043, 4304.757684029123,
                        5993.688590387939],
                       [np.NaN, Timestamp('2015-08-25 00:00:00'), 1, 0.0, 0, 0, 0, 0, 1, 0, 0, 0, 3059.7814981571255, 0.0,
                        0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 2701.505381707474, 2822.453599119718,
                        2982.9973804342417, 2882.3793085438783, 2886.761893667938, 2701.505381707474,
                        3059.7814981571255],
                       [np.NaN, Timestamp('2015-08-25 00:00:00'), 1, 1.0, 0, 0, 0, 0, 1, 0, 0, 0, 4169.9542506882935,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 1.074164343651558, 0.0, 0.0, 0.0, 4123.053364067877,
                        4005.559669075016, 4054.074389377686, 3957.7551330204774, 3917.207184333306, 3917.207184333306,
                        4169.9542506882935],
                       [np.NaN, Timestamp('2015-08-26 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 1, 0, 0, 2992.807107726506, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 2750.998891002914, 2811.5272677877915,
                        2917.8124123658004, 2892.2991117357165, 2847.280854880882, 2750.998891002914,
                        2992.807107726506],
                       [np.NaN, Timestamp('2015-08-26 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 1, 0, 0, 4078.6876514155115,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.9762676801965333, 0.0, 0.0, 4198.581011446849,
                        3990.0548991510136, 3965.491907261605, 3971.374593938397, 3863.6380551888333,
                        3863.6380551888333, 4198.581011446849],
                       [np.NaN, Timestamp('2015-08-27 00:00:00'), 1, 0.0, 0, 0, 1, 0, 0, 0, 0, 0, 3055.8771471808213, 0.0,
                        0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 2877.9309414037516, 2912.6994070111336,
                        2784.506553629393, 3000.707329015417, 2963.5771267848386, 2784.506553629393,
                        3055.8771471808213],
                       [np.NaN, Timestamp('2015-08-27 00:00:00'), 1, 1.0, 0, 0, 1, 0, 0, 0, 0, 0, 4164.633756784825,
                        7.050157873697638, 0.0, 0.0, -7.070543102051501, 0.0, 0.0, 0.0, 0.0, 0.0, 4392.280736526722,
                        4133.620995924367, 3784.3371993987785, 4120.214389433199, 4021.432535781027, 3784.3371993987785,
                        4392.280736526722],
                       [np.NaN, Timestamp('2015-08-28 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 0, 1, 3090.207196665421, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 2801.4357998938053, 2987.1335482034237,
                        2914.870189019236, 3011.6775558039753, 3019.4854771171617, 2801.4357998938053,
                        3090.207196665421],
                       [np.NaN, Timestamp('2015-08-28 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 0, 1, 4211.415621452499,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0435205613507967, 4275.548297133901,
                        4239.245125251743, 3961.4936012916623, 4135.2760365362765, 4097.290763710644,
                        3961.4936012916623, 4275.548297133901],
                       [np.NaN, Timestamp('2015-08-29 00:00:00'), 1, 0.0, 0, 0, 0, 0, 0, 0, 1, 0, 3272.7075699427623, 0.0,
                        0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 3194.740270493404, 3204.793356619438,
                        3851.8298116432948, 3183.7045691829635, 3198.119272527163, 3183.7045691829635,
                        3851.8298116432948],
                       [np.NaN, Timestamp('2015-08-29 00:00:00'), 1, 1.0, 0, 0, 0, 0, 0, 0, 1, 0, 4460.110508079211,
                        7.050157873697638, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.9541432629294214, 0.0, 4875.7353073275335,
                        4548.110484416875, 5234.765821467297, 4371.461688633561, 4339.666778878291, 4339.666778878291,
                        5234.765821467297],
                       [np.NaN, Timestamp('2015-08-30 00:00:00'), 1, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, -0.020178854292784744,
                        0.0, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.025280362185493375,
                        -0.022206192498624377, -0.021548352910857584, -0.021935673313055445, -0.024246148814048508,
                        -0.025280362185493375, -0.020178854292784744],
                       [np.NaN, Timestamp('2015-08-30 00:00:00'), 1, 1.0, 0, 1, 0, 0, 0, 0, 0, 0, 0.3352110155731161,
                        7.050157873697638, 0.0, 0.3422985868203293, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4874330421544566,
                        0.3875167755644084, 0.3296574056570382, 0.34284003572582356, 0.3239338597274663,
                        0.3239338597274663, 0.4874330421544566]])
    df.columns = ['Sales', 'Date', 'Store', 'Promo', 'LastDayOfMonth', 'Weekday_6.0',
                  'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                  'Weekday_5.0', 'Weekday_4.0', 'Sales_h_2_pred', 'factor_Promo',
                  'factor_LastDayOfMonth', 'factor_Weekday_6.0', 'factor_Weekday_3.0',
                  'factor_Weekday_0.0', 'factor_Weekday_1.0', 'factor_Weekday_2.0',
                  'factor_Weekday_5.0', 'factor_Weekday_4.0', 'Sales_h_2_pred_b_11',
                  'Sales_h_2_pred_b_12', 'Sales_h_2_pred_b_13', 'Sales_h_2_pred_b_14',
                  'Sales_h_2_pred_b_15', 'Sales_h_2_pred_c_100', 'Sales_h_2_pred_c_0']
    return df


@pytest.fixture()
def test_fd_1():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:07"],
            "validate_start": "1970-01-01 00:00:01",
            "validate_end": "1970-01-01 00:00:09",
            "forecast_start": "1970-01-01 00:00:05",
            "forecast_end": "1970-01-01 00:00:14",
            "forecast_freq": "S",
            "confidence_intervals": [90],
            "bootstrap_sample": 5,
            "bin_features": {"b": [5, 10, 15]},
            "scenarios": [
                {"feature": "b", "values": [[0, 5]], "start": "1970-01-01 00:00:09", "end": "1970-01-01 00:00:14"}],
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
            "model": "LinearRegression",
        }
    }


@pytest.fixture()
def test_fd_retail():
    return {
        "forecast_definition": {
            "time_index": "Date",
            "target": "Sales",
            "include_features": ["Store", "Promo", "Weekday",
                                 "LastDayOfMonth"],
            "time_validation_splits": ["2015-07-18"],
            "forecast_end": "2015-08-30",
            "bootstrap_sample": 5,
            "signal_dimensions": ["Store"],
            "time_horizons": [2],
            "forecast_freq": "D",
            "encode_features": ["Weekday"],
            "scenarios": [{"feature": "Promo", "values": [0, 1], "start": "2015-08-01", "end": "2016-01-01"}],
            "dataset_directory": "dataset/retail/sales2",
            "link_function": "log",
            "confidence_intervals": [100, 0],
            "joins": [
                {
                    "dataset_directory": "dataset/time",
                    "join_on": ["Date", "Date"],
                    "as": "time"
                },
                {
                    "dataset_directory": "dataset/retail/store",
                    "join_on": ["Store", "Store"],
                    "as": "store"
                }
            ]
        }
    }


@pytest.fixture()
def test_fd_retail_2(test_bucket, test_fd_retail):
    test_fd = test_fd_retail
    test_fd["forecast_definition"].update(
        {"dataset_directory": "{}/{}".format(test_bucket, test_fd["forecast_definition"]["dataset_directory"])})
    for join in test_fd["forecast_definition"]["joins"]:
        join.update({"dataset_directory": "{}/{}".format(test_bucket, join["dataset_directory"])})
    return test_fd


@pytest.fixture()
def test_fd_2():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
            "joins": [
                {
                    "dataset_directory": "dataset/test2",
                    "join_on": ("a", "a"),
                    "as": "test2",
                }
            ],
        }
    }


@pytest.fixture()
def test_fd_3(test_bucket, test_fd_1):
    test_fd = test_fd_1
    test_fd["forecast_definition"].update({"dataset_directory": "{}/dataset/test1".format(test_bucket)})
    return test_fd


@pytest.fixture()
def test_composite_dataset_1():
    df = pd.DataFrame(
        [[Timestamp("1970-01-01 00:00:01"), 8.0, 12.0, 2.0, 3.0],
         [Timestamp("1970-01-01 00:00:04"), 20.0, 24.0, np.NaN, 6.0],
         [Timestamp("1970-01-01 00:00:05"), 15.0, 18.0, np.NaN, np.NaN],
         [Timestamp("1970-01-01 00:00:06"), 5.0, 6.0, np.NaN, np.NaN],
         [Timestamp("1970-01-01 00:00:07"), 48.0, 54.0, 8.0, np.NaN],
         [Timestamp("1970-01-01 00:00:10"), 77.0, 84.0, np.NaN, np.NaN]]
    )
    df.columns = ["a", "b", "c", "e", "f"]
    return df


@pytest.fixture()
def test_df_1():
    df = (
        pd.DataFrame(
            [
                [Timestamp("1970-01-01 00:00:01"), 2.0, 3.0],
                [Timestamp("1970-01-01 00:00:04"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:05"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:06"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:07"), 8.0, 9],
                [Timestamp("1970-01-01 00:00:10"), 11.0, 12.0],
            ]
        )
            .sample(25, replace=True, random_state=11)
            .reset_index(drop=True)
    )
    df.columns = ["a", "b", "c"]
    return df


@pytest.fixture()
def test_df_2():
    df = pd.DataFrame(
        [[Timestamp("1970-01-01 00:00:01"), 2.0, 3.0], [Timestamp("1970-01-01 00:00:04"), np.NaN, 6.0],
         [Timestamp("1970-01-01 00:00:07"), 8.0, np.NaN], [np.NaN, 11.0, 12.0]]
    )
    df.columns = ["a", "e", "f"]
    return df


@pytest.fixture()
def test_df_3():
    df = pd.DataFrame([[1, 2, 3], [4, "a", 6], [7, 8, "b"], ["c", 11, 12]]).astype(
        "str"
    )
    df.columns = ["a", "b", "c"]
    return df


@pytest.fixture()
def test_df_retail_sales():
    df = pd.DataFrame([[1, 5, "2015-07-31", 5263, 555, 1, 1, "z", 1],
                       [1, 4, "2015-07-30", 5020, 546, 1, 1, "z", 1],
                       [1, 3, "2015-07-29", 4782, 523, 1, 1, "z", 1],
                       [1, 2, "2015-07-28", 5011, 560, 1, 1, "z", 1],
                       [1, 1, "2015-07-27", 6102, 612, 1, 1, "z", 1],
                       [1, 7, "2015-07-26", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-25", 4364, 500, 1, 0, "z", 0],
                       [1, 5, "2015-07-24", 3706, 459, 1, 0, "z", 0],
                       [1, 4, "2015-07-23", 3769, 503, 1, 0, "z", 0],
                       [1, 3, "2015-07-22", 3464, 463, 1, 0, "z", 0],
                       [1, 2, "2015-07-21", 3558, 469, 1, 0, "z", 0],
                       [1, 1, "2015-07-20", 4395, 526, 1, 0, "z", 0],
                       [1, 7, "2015-07-19", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-18", 4406, 512, 1, 0, "z", 0],
                       [1, 5, "2015-07-17", 4852, 519, 1, 1, "z", 0],
                       [1, 4, "2015-07-16", 4427, 517, 1, 1, "z", 0],
                       [1, 3, "2015-07-15", 4767, 550, 1, 1, "z", 0],
                       [1, 2, "2015-07-14", 5042, 544, 1, 1, "z", 0],
                       [1, 1, "2015-07-13", 5054, 553, 1, 1, "z", 0],
                       [1, 7, "2015-07-12", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-11", 3530, 441, 1, 0, "z", 0],
                       [1, 5, "2015-07-10", 3808, 449, 1, 0, "z", 0],
                       [1, 4, "2015-07-09", 3897, 480, 1, 0, "z", 0],
                       [1, 3, "2015-07-08", 3797, 485, 1, 0, "z", 0],
                       [1, 2, "2015-07-07", 3650, 485, 1, 0, "z", 0]])
    df.columns = ["Store", "DayOfWeek", "Date", "Sales", "Customers", "Open", "Promo",
                  "StateHoliday", "SchoolHoliday"]
    return df


@pytest.fixture()
def test_df_retail_stores():
    df = pd.DataFrame([[1.0, "c", "a", 1270.0, 9.0, 2008, 0.0, np.NaN, np.NaN, None]])
    df.columns = ["Store", "StoreType", "Assortment", "CompetitionDistance",
                  "CompetitionOpenSinceMonth", "CompetitionOpenSinceYear", "Promo2",
                  "Promo2SinceWeek", "Promo2SinceYear", "PromoInterval"]
    return df


@pytest.fixture()
def test_df_retail_time():
    df = pd.DataFrame([[Timestamp('2015-07-01 00:00:00'), 7, 1, 2015, 2, False, 'None', 27, 78708, 0, 1, 1],
                       [Timestamp('2015-07-02 00:00:00'), 7, 2, 2015, 3, False, 'None', 27, 78709, 0, 2, 1],
                       [Timestamp('2015-07-03 00:00:00'), 7, 3, 2015, 4, True, 'July 4th', 27, 78710, 0, 3, 1],
                       [Timestamp('2015-07-04 00:00:00'), 7, 4, 2015, 5, False, 'None', 27, 78711, 0, 4, 1],
                       [Timestamp('2015-07-05 00:00:00'), 7, 5, 2015, 6, False, 'None', 27, 78712, 0, 5, 1],
                       [Timestamp('2015-07-06 00:00:00'), 7, 6, 2015, 0, False, 'None', 28, 78713, 0, 6, 1],
                       [Timestamp('2015-07-07 00:00:00'), 7, 7, 2015, 1, False, 'None', 28, 78714, 0, 7, 1],
                       [Timestamp('2015-07-08 00:00:00'), 7, 8, 2015, 2, False, 'None', 28, 78715, 0, 8, 2],
                       [Timestamp('2015-07-09 00:00:00'), 7, 9, 2015, 3, False, 'None', 28, 78716, 0, 9, 2],
                       [Timestamp('2015-07-10 00:00:00'), 7, 10, 2015, 4, False, 'None', 28, 78717, 0, 10, 2],
                       [Timestamp('2015-07-11 00:00:00'), 7, 11, 2015, 5, False, 'None', 28, 78718, 0, 11, 2],
                       [Timestamp('2015-07-12 00:00:00'), 7, 12, 2015, 6, False, 'None', 28, 78719, 0, 12, 2],
                       [Timestamp('2015-07-13 00:00:00'), 7, 13, 2015, 0, False, 'None', 29, 78720, 0, 13, 2],
                       [Timestamp('2015-07-14 00:00:00'), 7, 14, 2015, 1, False, 'None', 29, 78721, 0, 14, 2],
                       [Timestamp('2015-07-15 00:00:00'), 7, 15, 2015, 2, False, 'None', 29, 78722, 0, 15, 3],
                       [Timestamp('2015-07-16 00:00:00'), 7, 16, 2015, 3, False, 'None', 29, 78723, 0, 16, 3],
                       [Timestamp('2015-07-17 00:00:00'), 7, 17, 2015, 4, False, 'None', 29, 78724, 0, 17, 3],
                       [Timestamp('2015-07-18 00:00:00'), 7, 18, 2015, 5, False, 'None', 29, 78725, 0, 18, 3],
                       [Timestamp('2015-07-19 00:00:00'), 7, 19, 2015, 6, False, 'None', 29, 78726, 0, 19, 3],
                       [Timestamp('2015-07-20 00:00:00'), 7, 20, 2015, 0, False, 'None', 30, 78727, 0, 20, 3],
                       [Timestamp('2015-07-21 00:00:00'), 7, 21, 2015, 1, False, 'None', 30, 78728, 0, 21, 3],
                       [Timestamp('2015-07-22 00:00:00'), 7, 22, 2015, 2, False, 'None', 30, 78729, 0, 22, 4],
                       [Timestamp('2015-07-23 00:00:00'), 7, 23, 2015, 3, False, 'None', 30, 78730, 0, 23, 4],
                       [Timestamp('2015-07-24 00:00:00'), 7, 24, 2015, 4, False, 'None', 30, 78731, 0, 24, 4],
                       [Timestamp('2015-07-25 00:00:00'), 7, 25, 2015, 5, False, 'None', 30, 78732, 0, 25, 4],
                       [Timestamp('2015-07-26 00:00:00'), 7, 26, 2015, 6, False, 'None', 30, 78733, 0, 26, 4],
                       [Timestamp('2015-07-27 00:00:00'), 7, 27, 2015, 0, False, 'None', 31, 78734, 0, 27, 4],
                       [Timestamp('2015-07-28 00:00:00'), 7, 28, 2015, 1, False, 'None', 31, 78735, 0, 28, 4],
                       [Timestamp('2015-07-29 00:00:00'), 7, 29, 2015, 2, False, 'None', 31, 78736, 0, 29, 5],
                       [Timestamp('2015-07-30 00:00:00'), 7, 30, 2015, 3, False, 'None', 31, 78737, 0, 30, 5],
                       [Timestamp('2015-07-31 00:00:00'), 7, 31, 2015, 4, False, 'None', 31, 78738, 1, 31, 5],
                       [Timestamp('2015-08-01 00:00:00'), 8, 1, 2015, 5, False, 'None', 31, 78739, 0, 1, 1],
                       [Timestamp('2015-08-02 00:00:00'), 8, 2, 2015, 6, False, 'None', 31, 78740, 0, 2, 1],
                       [Timestamp('2015-08-03 00:00:00'), 8, 3, 2015, 0, False, 'None', 32, 78741, 0, 3, 1],
                       [Timestamp('2015-08-04 00:00:00'), 8, 4, 2015, 1, False, 'None', 32, 78742, 0, 4, 1],
                       [Timestamp('2015-08-05 00:00:00'), 8, 5, 2015, 2, False, 'None', 32, 78743, 0, 5, 1],
                       [Timestamp('2015-08-06 00:00:00'), 8, 6, 2015, 3, False, 'None', 32, 78744, 0, 6, 1],
                       [Timestamp('2015-08-07 00:00:00'), 8, 7, 2015, 4, False, 'None', 32, 78745, 0, 7, 1],
                       [Timestamp('2015-08-08 00:00:00'), 8, 8, 2015, 5, False, 'None', 32, 78746, 0, 8, 2],
                       [Timestamp('2015-08-09 00:00:00'), 8, 9, 2015, 6, False, 'None', 32, 78747, 0, 9, 2],
                       [Timestamp('2015-08-10 00:00:00'), 8, 10, 2015, 0, False, 'None', 33, 78748, 0, 10, 2],
                       [Timestamp('2015-08-11 00:00:00'), 8, 11, 2015, 1, False, 'None', 33, 78749, 0, 11, 2],
                       [Timestamp('2015-08-12 00:00:00'), 8, 12, 2015, 2, False, 'None', 33, 78750, 0, 12, 2],
                       [Timestamp('2015-08-13 00:00:00'), 8, 13, 2015, 3, False, 'None', 33, 78751, 0, 13, 2],
                       [Timestamp('2015-08-14 00:00:00'), 8, 14, 2015, 4, False, 'None', 33, 78752, 0, 14, 2],
                       [Timestamp('2015-08-15 00:00:00'), 8, 15, 2015, 5, False, 'None', 33, 78753, 0, 15, 3],
                       [Timestamp('2015-08-16 00:00:00'), 8, 16, 2015, 6, False, 'None', 33, 78754, 0, 16, 3],
                       [Timestamp('2015-08-17 00:00:00'), 8, 17, 2015, 0, False, 'None', 34, 78755, 0, 17, 3],
                       [Timestamp('2015-08-18 00:00:00'), 8, 18, 2015, 1, False, 'None', 34, 78756, 0, 18, 3],
                       [Timestamp('2015-08-19 00:00:00'), 8, 19, 2015, 2, False, 'None', 34, 78757, 0, 19, 3],
                       [Timestamp('2015-08-20 00:00:00'), 8, 20, 2015, 3, False, 'None', 34, 78758, 0, 20, 3],
                       [Timestamp('2015-08-21 00:00:00'), 8, 21, 2015, 4, False, 'None', 34, 78759, 0, 21, 3],
                       [Timestamp('2015-08-22 00:00:00'), 8, 22, 2015, 5, False, 'None', 34, 78760, 0, 22, 4],
                       [Timestamp('2015-08-23 00:00:00'), 8, 23, 2015, 6, False, 'None', 34, 78761, 0, 23, 4],
                       [Timestamp('2015-08-24 00:00:00'), 8, 24, 2015, 0, False, 'None', 35, 78762, 0, 24, 4],
                       [Timestamp('2015-08-25 00:00:00'), 8, 25, 2015, 1, False, 'None', 35, 78763, 0, 25, 4],
                       [Timestamp('2015-08-26 00:00:00'), 8, 26, 2015, 2, False, 'None', 35, 78764, 0, 26, 4],
                       [Timestamp('2015-08-27 00:00:00'), 8, 27, 2015, 3, False, 'None', 35, 78765, 0, 27, 4],
                       [Timestamp('2015-08-28 00:00:00'), 8, 28, 2015, 4, False, 'None', 35, 78766, 0, 28, 4],
                       [Timestamp('2015-08-29 00:00:00'), 8, 29, 2015, 5, False, 'None', 35, 78767, 0, 29, 5],
                       [Timestamp('2015-08-30 00:00:00'), 8, 30, 2015, 6, False, 'None', 35, 78768, 0, 30, 5],
                       [Timestamp('2015-08-31 00:00:00'), 8, 31, 2015, 0, False, 'None', 36, 78769, 1, 31, 5]])
    df.columns = ['Date', 'Month', 'Day', 'Year', 'Weekday', 'Holiday', 'HolidayType',
                  'WeekOfYear', 'T', 'LastDayOfMonth', 'DayOfMonth', 'WeekOfMonth']
    return df
