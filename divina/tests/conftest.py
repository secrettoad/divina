import pytest
import pandas as pd
import numpy as np
from dask.distributed import Client
import os
import s3fs
from unittest.mock import patch
import shutil
from dask_ml.linear_model import LinearRegression
import dask.dataframe as ddf
import boto3
from dask_cloudprovider.aws import EC2Cluster
from pandas import Timestamp
import fsspec


@pytest.fixture()
def test_bucket():
    return "s3://divina-test-2"


@pytest.fixture()
def random_state():
    return 11


@pytest.fixture()
def setup_teardown_test_bucket_contents(s3_fs, test_bucket):
    fsspec.filesystem("s3").invalidate_cache()
    try:
        s3_fs.rm(test_bucket, recursive=True)
    except FileNotFoundError:
        pass
    s3_fs.mkdir(
        test_bucket,
        region_name=os.environ["AWS_DEFAULT_REGION"],
        acl="private",
    )
    yield
    try:
        s3_fs.rm(test_bucket, recursive=True)
    except FileNotFoundError:
        pass


@pytest.fixture(autouse=True)
def setup_teardown_test_directory(s3_fs, test_bucket):
    try:
        os.mkdir("divina-test")
    except FileExistsError:
        shutil.rmtree("divina-test")
        os.mkdir("divina-test")
    yield
    try:
        shutil.rmtree("divina-test")
    except FileNotFoundError:
        pass


@patch.dict(os.environ, {"AWS_SHARED_CREDENTIALS_FILE": "~/.aws/credentials"})
@pytest.fixture()
def divina_session():
    return boto3.Session()


@pytest.fixture(scope="session")
def s3_fs():
    return s3fs.S3FileSystem()


@pytest.fixture(scope="session")
def dask_client(request):
    client = Client()
    request.addfinalizer(lambda: client.close())
    yield client
    client.shutdown()


@pytest.fixture(scope="session")
def dask_cluster_ip():
    return '52.15.169.227:8786'


@pytest.fixture(scope="session")
def dask_client_remote(request, dask_cluster_ip):
    if dask_cluster_ip:
        client = Client(dask_cluster_ip)
        yield client
    else:
        cluster = EC2Cluster(
            key_name="divina2",
            security=False,
            docker_image="jhurdle/divina:test",
            debug=False,
            env_vars={
                "AWS_SECRET_ACCESS_KEY": os.environ["AWS_SECRET_ACCESS_KEY"],
                "AWS_ACCESS_KEY_ID": os.environ["AWS_ACCESS_KEY_ID"],
                "AWS_DEFAULT_REGION": os.environ["AWS_DEFAULT_REGION"],
            },
            auto_shutdown=False,
        )
        cluster.scale(5)
        client = Client(cluster)
        request.addfinalizer(lambda: client.close())
        yield client
        client.shutdown()


@pytest.fixture()
def fd_no_dataset_directory():
    return {
        "forecast_definition": {
            "target": "c",
            "time_index": "a",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_invalid_model():
    return {
        "forecast_definition": {
            "target": "c",
            "time_index": "a",
            "dataset_directory": "divina-test/dataset/test1",
            "model": "scikitlearn.linear_models.linearRegression",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_no_time_index():
    return {
        "forecast_definition": {
            "target": "c",
            "dataset_directory": "divina-test/dataset/test1",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_no_target():
    return {
        "forecast_definition": {
            "time_index": "a",
            "dataset_directory": "divina-test/dataset/test1",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
        }
    }


@pytest.fixture()
def fd_time_validation_splits_not_list():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": "1970-01-01 00:00:08",
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def fd_time_horizons_not_list():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": 1,
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def fd_time_horizons_range_not_tuple():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [[1, 60]],
            "dataset_directory": "divina-test/dataset/test1",
        }
    }


@pytest.fixture()
def test_model_1(test_df_1, random_state, test_fd_1):
    params = [42.29402239932083, 0.7353679291665149, 36.998065910590576, -14.246342053030085]
    intercept = -31.99476098613591
    features = ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]']

    model = LinearRegression()
    model.fit(
        ddf.from_pandas(pd.DataFrame([np.array(params) + c for c in range(0, 2)]), npartitions=1).to_dask_array(
            lengths=True),
        ddf.from_pandas(pd.Series([intercept, intercept]), npartitions=1).to_dask_array(lengths=True))
    model.coef_ = np.array(params)
    model.intercept_ = intercept
    model._coef = np.array(params + [intercept])
    return (model, {"features": features})


@pytest.fixture()
def test_model_retail(test_df_1, random_state, test_fd_1):
    params = [7.037158170969071, 0.4932340350688223, 0.27259342357812283, 0.18940264900594353, -3.6834622221000717,
              0.4984087190231185, 0.5368146044322767, 0.49909604923189516, 0.487186048658764, 0.6179858352023053,
              0.5021278348261174, -3.385064917603151, 0.5330286617997554, 0.41455435987080824, 0.18775054632565508,
              0.15306128463281526, 0.6284985207120164, 0.6795648992676631, 0.40046449375304205, -3.359386388458164,
              0.4558462123976466, 0.32753112486200764, 0.4047017669158538, 0.7156131294903266, 0.4747486484045316,
              0.45976607692456334, 0.5064120143313671, 0.6447829633588602, -3.3850649176031515, 0.19104786904854365,
              0.18940264900594353, 0.6928306163987392, 0.6569387471664435, 0.34607755993840705, 0.41276666500878173]
    intercept = 0.6542184768053281
    features = ['Promo', 'SchoolHoliday', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0',
                'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_19.0', 'DayOfMonth_23.0', 'DayOfMonth_27.0',
                'DayOfMonth_28.0', 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_11.0',
                'DayOfMonth_12.0', 'DayOfMonth_14.0', 'DayOfMonth_16.0', 'DayOfMonth_17.0', 'DayOfMonth_20.0',
                'DayOfMonth_21.0', 'DayOfMonth_22.0', 'DayOfMonth_24.0', 'DayOfMonth_25.0', 'DayOfMonth_26.0',
                'DayOfMonth_30.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0', 'DayOfMonth_10.0', 'DayOfMonth_13.0',
                'DayOfMonth_15.0', 'DayOfMonth_18.0']

    model = LinearRegression()
    model.fit(
        ddf.from_pandas(pd.DataFrame([np.array(params) + c for c in range(0, 2)]), npartitions=1).to_dask_array(
            lengths=True),
        ddf.from_pandas(pd.Series([intercept, intercept]), npartitions=1).to_dask_array(lengths=True))
    model.coef_ = np.array(params)
    model.intercept_ = intercept
    model._coef = np.array(params + [intercept])
    return (model, {"features": features})


@pytest.fixture()
def test_params_1(test_model_1):
    return test_model_1[1]


@pytest.fixture()
def test_bootstrap_models(test_df_1, random_state, test_fd_1):
    params = [[43.53071027441953, 0.6824085144938496, 35.53552539883961, -15.644533586854198],
              [43.289095808310236, 0.7975091437642748, 35.21697740771039, -5.108181385334677],
              [42.91896900218957, 0.8103922586740234, 34.96192027758719, -4.815717516613729],
              [45.28174982254647, 0.5496547154243477, 33.71704394265478, -16.59380700949619],
              [45.522881003151184, 0.6510965285161292, 33.32690985921098, -4.650073040493704]]
    intercepts = [-30.61752065163089, -35.07490345451706, -35.055431021436135, -26.755865504023124, -33.350348213391186]
    features = [['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'], ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'],
                ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'], ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]'],
                ['b', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(15, inf]']]
    seeds = range(random_state, random_state + test_fd_1["forecast_definition"]["bootstrap_sample"])
    bootstrap_models = {}

    for j, i, p, f, seed in zip(range(0, len(seeds)), intercepts, params, features, seeds):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(pd.DataFrame([np.array(params[j]) + c for c in range(0, len(seeds))]),
                            npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        bootstrap_models[seed] = (model, {"features": f})
    return bootstrap_models


@pytest.fixture()
def test_bootstrap_models_retail(test_df_1, random_state, test_fd_1):
    params = [[6.643932953270661, 0.6260364498868285, 0.31918623945495733, 0.23423245984677996, -3.547744343528209,
               0.5963643382718036, 0.5461500634517222, 0.599524608261714, 0.6256869892244343, 0.7922640044073792,
               0.564301267830736, -3.196111422680582, 0.4778005895412411, 0.16215693805253273, 0.15712633420359842,
               0.8892764359349725, 0.865254690614509, 0.5854459099996437, -3.1306691705249476, 0.5578175859834436,
               0.44678390027838205, 0.6447735626026266, 0.8336877386889633, 0.7659003606714241, -3.196111422680582,
               0.22863089991643462, 0.23423245984677996, 0.9013229016856845, 0.5570103755595892, 0.4404237454134457],
              [6.688561227702059, 0.5517670506412442, 0.35321326079971904, 0.1860355789654757, -3.5716807262469623,
               0.6312114345896419, 0.5749344154496477, 0.6004142467183095, 0.5750982269355176, 0.7683271180577859,
               0.630062792820489, -3.226265416798491, 0.6708709221395525, 0.5749344154496477, 0.18613624126348308,
               0.22240616547787925, 0.8591656256802459, 0.8672504393401864, 0.5814917292774523, -3.134619142753566,
               0.5663293999281276, 0.3733411776795603, 0.4539281460296921, 0.656652627308842, 0.7357478037278692,
               -3.2262654167984905, 0.2247350368500566, 0.1860355789654757, 0.8572276608371586, 0.8256893360850589],
              [7.218826725057033, 0.44606980581521916, 0.1934039445686336, -3.7260290898011217, 0.3824849821099785,
               0.47028028452181536, 0.4132329845511205, 0.4011327981897966, 0.6208722632334958, 0.45547992921194,
               -3.533626570413229, 0.5504963908320178, 0.15133052926678806, 0.11697390204336387, 0.43925745124993065,
               0.49028930152094424, -3.5262178280455587, 0.40510108956393864, 0.22534135177343922, 0.39544415418566453,
               0.5446576863156511, 0.3962542838852929, 0.38151727039285593, 0.3183278938569467, 0.5834979613429083,
               0.25083289345462256, 0.5088323933964385, 0.3463998876269044, 0.3624043575286703],
              [7.157878693809477, 0.4166532356186096, 0.2633685685801884, 0.164178471705681, -3.7097936844543056,
               0.4402550155139545, 0.5157339278355035, 0.4163708721720424, 0.41258713363346466, 0.4897833764933656,
               0.42595776984871475, 0.4427894415100444, 0.3970143113481576, 0.1170006963015829, 0.1423792862374243,
               0.5833465393467204, 0.5878464170288371, 0.44149331952488113, -3.4315340053970713, 0.4172853054902338,
               0.319890581030604, 0.5801682640814287, 0.33113254089743094, 0.38586624762663324, 0.48651979020392255,
               -3.59754626351183, 0.21905209471883844, 0.164178471705681, 0.5199010738801335, 0.5648785042573997],
              [6.739881079307763, 0.5124317583959213, 0.32874966824916374, 0.21786124859964803, -3.5971338819678467,
               0.6571444169347329, 0.6393290714677631, 0.6054418544693634, 0.5723254184047881, 0.7428770450458657,
               0.5383230421051751, -3.2344106484131645, 0.5529381588508739, 0.45095914279593674, 0.2833780811611728,
               0.15515672961777646, 0.681587260724348, 0.8524013200132534, 0.5294578008132041, -3.1866509458577976,
               0.39477883614026943, 0.8416858340931691, 0.6601604448144781, 0.7276077642038079, -3.234410648413166,
               0.21786124859964803, 0.8161893541158314, 0.8021157665835167, 0.42344123438543696, 0.5286762507902876]]
    intercepts = [0.7752578052698612, 0.7451052306199654, 0.5928917827900219, 0.32841762794188634, 0.736965206914541]
    features = [['Promo', 'SchoolHoliday', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0',
                 'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_19.0', 'DayOfMonth_27.0', 'DayOfMonth_28.0',
                 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_11.0', 'DayOfMonth_12.0',
                 'DayOfMonth_14.0', 'DayOfMonth_17.0', 'DayOfMonth_22.0', 'DayOfMonth_24.0', 'DayOfMonth_25.0',
                 'DayOfMonth_26.0', 'DayOfMonth_30.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0', 'DayOfMonth_13.0',
                 'DayOfMonth_15.0', 'DayOfMonth_18.0'],
                ['Promo', 'SchoolHoliday', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0',
                 'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_19.0', 'DayOfMonth_23.0', 'DayOfMonth_27.0',
                 'DayOfMonth_28.0', 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_11.0',
                 'DayOfMonth_12.0', 'DayOfMonth_14.0', 'DayOfMonth_16.0', 'DayOfMonth_17.0', 'DayOfMonth_24.0',
                 'DayOfMonth_25.0', 'DayOfMonth_26.0', 'DayOfMonth_30.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0',
                 'DayOfMonth_10.0', 'DayOfMonth_18.0'],
                ['Promo', 'SchoolHoliday', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0', 'Weekday_2.0',
                 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_19.0', 'DayOfMonth_23.0', 'DayOfMonth_28.0',
                 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_12.0', 'DayOfMonth_14.0',
                 'DayOfMonth_16.0', 'DayOfMonth_17.0', 'DayOfMonth_20.0', 'DayOfMonth_21.0', 'DayOfMonth_22.0',
                 'DayOfMonth_24.0', 'DayOfMonth_25.0', 'DayOfMonth_30.0', 'DayOfMonth_10.0', 'DayOfMonth_13.0',
                 'DayOfMonth_15.0', 'DayOfMonth_18.0'],
                ['Promo', 'SchoolHoliday', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0',
                 'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_23.0', 'DayOfMonth_27.0', 'DayOfMonth_28.0',
                 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_11.0', 'DayOfMonth_12.0',
                 'DayOfMonth_14.0', 'DayOfMonth_17.0', 'DayOfMonth_20.0', 'DayOfMonth_22.0', 'DayOfMonth_24.0',
                 'DayOfMonth_25.0', 'DayOfMonth_26.0', 'DayOfMonth_30.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0',
                 'DayOfMonth_10.0', 'DayOfMonth_15.0'],
                ['Promo', 'SchoolHoliday', 'LastDayOfMonth', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0', 'Weekday_1.0',
                 'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0', 'DayOfMonth_19.0', 'DayOfMonth_23.0', 'DayOfMonth_27.0',
                 'DayOfMonth_28.0', 'DayOfMonth_29.0', 'DayOfMonth_7.0', 'DayOfMonth_8.0', 'DayOfMonth_11.0',
                 'DayOfMonth_12.0', 'DayOfMonth_16.0', 'DayOfMonth_20.0', 'DayOfMonth_21.0', 'DayOfMonth_25.0',
                 'DayOfMonth_26.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0', 'DayOfMonth_10.0', 'DayOfMonth_13.0',
                 'DayOfMonth_15.0', 'DayOfMonth_18.0']]
    seeds = range(random_state, random_state + test_fd_1["forecast_definition"]["bootstrap_sample"])
    bootstrap_models = {}

    for j, i, p, f, seed in zip(range(0, len(seeds)), intercepts, params, features, seeds):
        model = LinearRegression()
        model.fit(
            ddf.from_pandas(pd.DataFrame([np.array(params[j]) + c for c in range(0, len(seeds))]),
                            npartitions=1).to_dask_array(
                lengths=True),
            ddf.from_pandas(pd.Series(intercepts), npartitions=1).to_dask_array(lengths=True))
        model.coef_ = np.array(p)
        model.intercept_ = i
        model._coef = np.array(p + [i])
        bootstrap_models[seed] = (model, {"features": f})
    return bootstrap_models


@pytest.fixture()
def test_params_2(test_model_1):
    return test_model_1[1]


@pytest.fixture()
def test_metrics_1():
    return {'splits': {'1970-01-01 00:00:07': {'time_horizons': {'1': {'mae': 13.635626033674352}}}}}


@pytest.fixture()
def test_metrics_retail():
    return {'splits': {'2015-07-18': {'time_horizons': {'2': {'mae': 1637.7003793036372}}}}}


@pytest.fixture()
def test_val_predictions_1():
    df = pd.DataFrame(
        [[Timestamp('1970-01-01 00:00:01'), 33.93062377962286], [Timestamp('1970-01-01 00:00:04'), 25.00661999651522],
         [Timestamp('1970-01-01 00:00:05'), 21.329780350682647], [Timestamp('1970-01-01 00:00:06'), 31.72451999212332],
         [Timestamp('1970-01-01 00:00:07'), 45.59692201317764]]
    )
    df.columns = ['a', 'c_h_1_pred']
    return df


@pytest.fixture()
def test_val_predictions_retail():
    df = pd.DataFrame(
        [[Timestamp('2015-07-18 00:00:00'), 4060.722740740202],
         [Timestamp('2015-07-19 00:00:00'), -0.030882067115881453],
         [Timestamp('2015-07-20 00:00:00'), 3981.1848497956667], [Timestamp('2015-07-21 00:00:00'), 3012.9381817430053],
         [Timestamp('2015-07-22 00:00:00'), 2932.9657834498703], [Timestamp('2015-07-23 00:00:00'), 3191.614816768275],
         [Timestamp('2015-07-24 00:00:00'), 3119.3424054751713], [Timestamp('2015-07-25 00:00:00'), 4022.5785392614202],
         [Timestamp('2015-07-26 00:00:00'), -0.030882067115881887],
         [Timestamp('2015-07-27 00:00:00'), 6337.228512268605], [Timestamp('2015-07-28 00:00:00'), 4864.049771897177],
         [Timestamp('2015-07-29 00:00:00'), 4642.543146170081], [Timestamp('2015-07-30 00:00:00'), 4876.764100316051],
         [Timestamp('2015-07-31 00:00:00'), 5906.150011036827]])
    df.columns = ['Date', 'Sales_h_2_pred']
    return df


@pytest.fixture()
def test_forecast_1():
    df = pd.DataFrame(
        [[Timestamp('1970-01-01 00:00:05'), 15.0, 18.0, 0, 0, 0, 1, 21.329780350682647, 23.14931734019639,
          20.1768295102573, 20.019421860863787, 26.770705049888566, 21.938980717501934, 23.14931734019639],
         [Timestamp('1970-01-01 00:00:06'), 5.0, 6.0, 0, 1, 0, 0, 31.72451999212332, 31.298219260034585,
          42.168460141796935, 42.15521277894596, 31.43621639017202, 44.12829060523813, 42.168460141796935],
         [Timestamp('1970-01-01 00:00:07'), 48.0, 54.0, 0, 0, 0, 1, 45.59692201317764, 45.66879831849342,
          46.49463125447837, 46.76236639710656, 44.90931065889205, 43.425166158534196, 46.41273308192788],
         [Timestamp('1970-01-01 00:00:10'), 0.0, 84.0, 1, 0, 0, 0, 79.2920883099114, 79.06623567325914,
          78.50607321602062, 77.88088927977677, 78.99879376520126, 78.84979086236217, 79.06623567325914],
         [Timestamp('1970-01-01 00:00:10'), 1.0, 84.0, 1, 0, 0, 0, 80.02745623907792, 79.74864418775299,
          79.3035823597849, 78.6912815384508, 79.54844848062561, 79.5008873908783, 79.74864418775299],
         [Timestamp('1970-01-01 00:00:10'), 2.0, 84.0, 1, 0, 0, 0, 80.76282416824444, 80.43105270224684,
          80.10109150354917, 79.50167379712481, 80.09810319604995, 80.15198391939443, 80.43105270224684],
         [Timestamp('1970-01-01 00:00:10'), 3.0, 84.0, 1, 0, 0, 0, 81.49819209741095, 81.11346121674069,
          80.89860064731344, 80.31206605579884, 80.6477579114743, 80.80308044791056, 81.11346121674069],
         [Timestamp('1970-01-01 00:00:10'), 4.0, 84.0, 1, 0, 0, 0, 82.23356002657746, 81.79586973123455,
          81.69610979107772, 81.12245831447287, 81.19741262689865, 81.45417697642668, 81.79586973123455],
         [Timestamp('1970-01-01 00:00:10'), 5.0, 84.0, 0, 1, 0, 0, 31.72451999212332, 31.298219260034585,
          42.168460141796935, 42.15521277894596, 31.43621639017202, 44.12829060523813, 42.168460141796935]]
    )
    df.index = list(df.index + 1)
    df.index.name = "forecast_index"
    df.columns = ['a', 'b', 'c', 'b_(-inf, 5]', 'b_(5, 10]', 'b_(10, 15]', 'b_(15, inf]',
                  'c_h_1_pred', 'c_h_1_pred_b_11', 'c_h_1_pred_b_12', 'c_h_1_pred_b_13',
                  'c_h_1_pred_b_14', 'c_h_1_pred_b_15', 'c_h_1_pred_c_90']
    return df


@pytest.fixture()
def test_forecast_retail():
    df = pd.DataFrame([[3650.0, Timestamp('2015-07-07 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3513.852150498327,
                        3403.093637750856, 3455.9469706455006, 3200.3157010302994, 3488.7874310337074,
                        3061.2652366721386, 3408.3789710403207, 3455.9469706455006],
                       [3797.0, Timestamp('2015-07-08 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3654.211070325222,
                        3410.38836681436, 3396.889878536948, 3327.406116744428, 3491.2874995072984, 3513.3428038311768,
                        3398.2397273646893, 3410.38836681436],
                       [3897.0, Timestamp('2015-07-09 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3744.826277235675,
                        3433.4778804288653, 3557.1652903844024, 1999.8186627563275, 3353.422096669593,
                        3688.3842395471884, 3445.846621424419, 3557.1652903844024],
                       [3808.0, Timestamp('2015-07-10 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        3626.2307341515975, 1349.5054666577794, 3442.739957028495, 3579.0750671959954,
                        3457.9313705872046, 3229.2663948334766, 3229.2663948334766, 3442.739957028495],
                       [3530.0, Timestamp('2015-07-11 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3150.420239605237,
                        3045.1776912246596, 3096.5912584458647, 2538.4403174973477, 3257.9338787877077,
                        3016.5964776411424, 3050.3190479467803, 3096.5912584458647],
                       [0.0, Timestamp('2015-07-12 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00567427970461823,
                        -0.033892880129609566, -0.0175822377617556, -0.032867907734113334, 0.01668873061308585,
                        -0.0429539298573082, -0.03226181589282417, -0.0175822377617556],
                       [5054.0, Timestamp('2015-07-13 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4505.537369910123,
                        4328.164482297116, 2477.137858948994, 4824.0515758967, 3261.5548288372083, 4084.0250667103714,
                        3508.295900199157, 4328.164482297116],
                       [5042.0, Timestamp('2015-07-14 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4842.217093620154,
                        4569.1970330081585, 4477.627536394027, 4832.038341028464, 4482.629291200806, 2584.7081419983606,
                        4486.78448605544, 4569.1970330081585],
                       [4767.0, Timestamp('2015-07-15 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4583.080960163927,
                        4170.705140447092, 2477.5438396451004, 4574.328079893999, 4085.878239617633, 4243.224968370194,
                        2646.8599697252994, 4170.705140447092],
                       [4427.0, Timestamp('2015-07-16 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        4256.0514423026625, 2606.986486377222, 3807.0818527020524, 3914.5961289159986,
                        3024.3647597831405, 4039.9540367159634, 3291.434170522998, 3807.0818527020524],
                       [4852.0, Timestamp('2015-07-17 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4614.713814988225,
                        3947.356010026454, 4121.9294333420785, 4992.14182203398, 4105.721416651699, 2416.854558371606,
                        3964.8133523580163, 4121.9294333420785],
                       [4406.0, Timestamp('2015-07-18 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4060.722740740202,
                        3681.8963121295424, 3647.2160598750534, 4593.38769405604, 2094.740164217483, 3712.4748379990156,
                        3650.684085100502, 3681.8963121295424],
                       [0.0, Timestamp('2015-07-19 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.030882067115881453, -0.09509273752676341, -0.10361468137716115, -0.04000666298845732,
                        30.440127074265362, -0.08758783078507346, -0.10276248699212137, -0.07331348044608861],
                       [4395.0, Timestamp('2015-07-20 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        3981.1848497956667, 1325.2132989186152, 1426.236938306417, 3764.9848858574264,
                        3841.125029927133, 3716.8320118667716, 1335.3156628573954, 3731.2778740639683],
                       [3558.0, Timestamp('2015-07-21 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        3012.9381817430053, 1397.922479174641, 1463.0699514434227, 3065.567060265895,
                        1946.3983202452725, 2996.3486051639607, 1404.4372264015192, 2261.383405720879],
                       [3464.0, Timestamp('2015-07-22 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2932.9657834498703, 2735.3864225939346, 1426.4707552603968, 2984.3634990525484,
                        2700.597026266806, 1497.4799366516306, 1858.4150635361834, 2735.3864225939346],
                       [3769.0, Timestamp('2015-07-23 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3191.614816768275,
                        1393.5084848260904, 2952.196979605148, 3468.646858922456, 3104.4786927224477,
                        2834.4718936404975, 1549.3773343039961, 2952.196979605148],
                       [3706.0, Timestamp('2015-07-24 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        3119.3424054751713, 3107.58202221481, 2907.1622976183708, 2958.082544603691, 2890.9974781949413,
                        1447.3845652387113, 2927.204270078015, 3087.540049755166],
                       [4364.0, Timestamp('2015-07-25 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        4022.5785392614202, 3647.594552627283, 3613.237369299564, 4550.430916437647, 3408.025868847599,
                        3677.8882831685814, 3616.673087632336, 3647.594552627283],
                       [0.0, Timestamp('2015-07-26 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.030882067115881887, -0.09509273752676341, -0.10361468137716076, 31.877799253087854,
                        -0.1388281957988882, -0.08758783078507466, -0.10276248699212102, -0.09509273752676341],
                       [6102.0, Timestamp('2015-07-27 00:00:00'), 1, 1.0, 1.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6337.228512268605,
                        5502.317083991593, 6268.239723422115, 4139.536964432983, 6313.783414416584, 5832.373285812955,
                        5578.909347934645, 6268.239723422115],
                       [5011.0, Timestamp('2015-07-28 00:00:00'), 1, 1.0, 1.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4864.049771897177,
                        4232.723686456383, 4358.410091719274, 4548.915722558311, 4320.129331841885, 4767.95480576107,
                        4320.129331841885, 4388.7652490568125],
                       [4782.0, Timestamp('2015-07-29 00:00:00'), 1, 1.0, 1.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4642.543146170081,
                        4323.141774528882, 4406.425149316546, 4342.375873118037, 4414.458322161092, 4057.4023040474003,
                        4331.470112007648, 4406.425149316546],
                       [5020.0, Timestamp('2015-07-30 00:00:00'), 1, 1.0, 1.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4876.764100316051,
                        4509.444023707196, 4671.67976038743, 4872.7471279422825, 4900.064023805961, 3781.7514584618666,
                        4525.667597375219, 4671.67976038743],
                       [5263.0, Timestamp('2015-07-31 00:00:00'), 1, 1.0, 1.0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5906.150011036827,
                        5551.046236971502, 5407.221041221539, 4078.706810533671, 5388.539429977755, 5192.213963345473,
                        5421.603560796535, 5551.046236971502],
                       [np.NaN, Timestamp('2015-08-01 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2110.4791633929735,
                        1695.2868879508424, 1730.7510543886567, 2538.4403174973477, 2094.740164217483,
                        1776.1355835177699, 1698.8333045946238, 1871.7169577276838],
                       [np.NaN, Timestamp('2015-08-01 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3456.766160646278,
                        3171.3674175753554, 3005.8713434839738, 3966.013383059727, 3177.9788438592523,
                        2965.6536599308834, 3029.351215109394, 3171.3674175753554],
                       [np.NaN, Timestamp('2015-08-02 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27.60827320421136,
                        21.113507252988065, 21.57584436937299, 31.877799253087854, 30.440127074265362,
                        22.167425003708388, 21.159740964626558, 23.79967946385928],
                       [np.NaN, Timestamp('2015-08-02 00:00:00'), 1, 1.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 45.84901500097604,
                        40.356312069617715, 38.19885558446254, 50.3603996691239, 46.69078749543117, 37.67444150905918,
                        40.12681355663424, 40.356312069617715],
                       [np.NaN, Timestamp('2015-08-03 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1945.8593733255414,
                        1325.2132989186152, 1426.236938306417, 2183.4230221700955, 2149.837589235168, 1601.323673775545,
                        1335.3156628573954, 1704.684383640544],
                       [np.NaN, Timestamp('2015-08-03 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3187.1841778654625,
                        2479.261969911818, 2477.137858948994, 3411.4193837139082, 3261.5548288372083, 2673.832148591992,
                        2477.3502700452764, 2827.837757374033],
                       [np.NaN, Timestamp('2015-08-04 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1873.7942896536429,
                        1397.922479174641, 1463.0699514434227, 2062.295435607801, 1946.3983202452725, 1547.935087975171,
                        1404.4372264015192, 1645.6928484787124],
                       [np.NaN, Timestamp('2015-08-04 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3069.1701278075802,
                        2615.241464914266, 2541.0917000135973, 3222.1986512401054, 2952.9625981917875,
                        2584.7081419983606, 2584.7081419983606, 2695.1844788563885],
                       [np.NaN, Timestamp('2015-08-05 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1851.5979302910866,
                        1435.0045849929459, 1426.4707552603968, 2037.4796171149671, 1939.0437967423632,
                        1497.4799366516306, 1427.3241382336516, 1603.7153347434673],
                       [np.NaN, Timestamp('2015-08-05 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3032.821286850956,
                        2684.5918001132736, 2477.5438396451004, 3183.4323595519963, 2941.806694887742,
                        2500.4810516600674, 2632.87874462837, 2684.5918001132736],
                       [np.NaN, Timestamp('2015-08-06 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1872.5061296494787,
                        1393.5084848260904, 1508.8606824762637, 1999.8186627563275, 1993.4701584703057,
                        1630.1254183185088, 1405.0437045911076, 1702.8396317177996],
                       [np.NaN, Timestamp('2015-08-06 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3067.060632175738,
                        2606.986486377222, 2620.5989921217224, 3124.599903860827, 3024.3647597831405, 2721.912217244741,
                        2608.347736951672, 2812.6479800062607],
                       [np.NaN, Timestamp('2015-08-07 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3524.524598726578,
                        3285.277213523554, 3559.9749410641575, 3338.4590291053855, 3522.404550515867, 2862.475518048369,
                        3312.7469862776143, 3524.524598726578],
                       [np.NaN, Timestamp('2015-08-07 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5772.412244529931,
                        6144.940778859909, 6181.986566120657, 5215.771022087445, 5343.569291408118, 4779.130567711259,
                        4910.122704024115, 6148.645357585984],
                       [np.NaN, Timestamp('2015-08-08 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4164.988683568463,
                        4028.71788308298, 4121.185591661736, 4145.368997217636, 3771.557707203167, 4166.8660465241555,
                        4037.9646539408554, 4121.185591661736],
                       [np.NaN, Timestamp('2015-08-08 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6821.238620877846,
                        7535.311106994579, 7156.426985061573, 6476.293909894569, 5721.503840505904, 6956.6092987498905,
                        5947.940861322503, 7194.3153972548735],
                       [np.NaN, Timestamp('2015-08-09 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56.19843656701646,
                        53.462452072181065, 52.2026476141357, 31.877799253087854, 51.87793178159295, 51.401569934264145,
                        52.328628059940236, 53.462452072181065],
                       [np.NaN, Timestamp('2015-08-09 00:00:00'), 1, 1.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92.66837325805662,
                        100.85476859033156, 91.37673977619984, 50.3603996691239, 79.2092880170962, 86.47633589322838,
                        59.01506617351559, 92.66837325805662],
                       [np.NaN, Timestamp('2015-08-10 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3754.255192348811,
                        1325.2132989186152, 3258.030310141955, 3632.4555005022144, 3782.8266806140464,
                        3572.5898056813458, 1518.4950000409492, 3590.5495141276065],
                       [np.NaN, Timestamp('2015-08-10 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6148.6199222868245,
                        2479.261969911818, 5657.714526130863, 5675.040699963937, 5738.597480584418, 5964.556806380965,
                        2797.1072255337226, 5694.107734150081],
                       [np.NaN, Timestamp('2015-08-11 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797.16385212001,
                        2511.1731931573927, 2617.7888102342667, 2062.295435607801, 3027.258211442567, 2629.109435047456,
                        2521.83475486508, 2617.7888102342667],
                       [np.NaN, Timestamp('2015-08-11 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4581.28357046946,
                        4697.224363984897, 4546.051383727736, 3222.1986512401054, 4592.49348372748, 4389.561898522841,
                        4561.168681753452, 4592.49348372748],
                       [np.NaN, Timestamp('2015-08-12 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63.38996713661307,
                        61.736961525664256, 61.1182801448593, 58.9638388800188, 61.73577267625827, 60.90218957568894,
                        61.1801482829398, 61.736961525664256],
                       [np.NaN, Timestamp('2015-08-12 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104.44525056659032,
                        116.32961802358975, 106.85711722290515, 92.67314116328714, 94.16241445201025,
                        102.33615452060229, 93.11992314990408, 107.8043673029736],
                       [np.NaN, Timestamp('2015-08-13 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2647.223852510866,
                        2433.0399022389192, 1508.8606824762637, 2828.093425002457, 1993.4701584703057,
                        2490.067794398608, 2142.4494492487966, 2433.0399022389192],
                       [np.NaN, Timestamp('2015-08-13 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4335.741267346419,
                        4551.100787779499, 2620.5989921217224, 4418.498029381334, 3024.3647597831405, 4157.453332390153,
                        3364.2913315652445, 4393.67100077086],
                       [np.NaN, Timestamp('2015-08-14 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2965.4825940949204,
                        2358.1385426585384, 2656.0012612539194, 3226.321269588339, 2983.303810013984,
                        1447.3845652387113, 2387.9248145180763, 2656.0012612539194],
                       [np.NaN, Timestamp('2015-08-14 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4856.922970703059,
                        4411.021515604051, 4612.400368268039, 5040.593842420997, 4525.82008851289, 2416.854558371606,
                        4431.15940087045, 4612.400368268039],
                       [np.NaN, Timestamp('2015-08-15 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3189.4290053747327,
                        2633.9532083911836, 1730.7510543886567, 3647.6165444867984, 2909.498636526935,
                        3014.2389964096456, 1821.0712697889094, 2940.9207444917483],
                       [np.NaN, Timestamp('2015-08-15 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5223.658449862221,
                        4926.845498607708, 3005.8713434839738, 5698.724684176352, 4413.866760954138, 5032.476279034596,
                        4599.449616378275, 4926.845498607708],
                       [np.NaN, Timestamp('2015-08-16 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38.695072981465344,
                        21.113507252988065, 31.793216472385442, 40.18767194855927, 30.440127074265362,
                        33.38175457737683, 30.440127074265362, 31.793216472385442],
                       [np.NaN, Timestamp('2015-08-16 00:00:00'), 1, 1.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64.00479970597279,
                        40.356312069617715, 55.939467495397, 63.34175464223288, 46.69078749543117, 56.39503445759488,
                        49.60206158408028, 55.939467495397],
                       [np.NaN, Timestamp('2015-08-17 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2917.0607336502126,
                        2072.2380035249, 2246.162951598477, 3242.9635004340907, 2960.654081845959, 1601.323673775545,
                        2089.6304983322575, 2246.162951598477],
                       [np.NaN, Timestamp('2015-08-17 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4777.627151268024,
                        3876.3351005540394, 3900.790540953742, 5066.59167825679, 4491.463249867203, 2673.832148591992,
                        3878.7806445940096, 3900.790540953742],
                       [np.NaN, Timestamp('2015-08-18 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3605.4265906652713,
                        3036.273043907834, 3083.30215538223, 3731.9403228112606, 1946.3983202452725, 3235.630636534702,
                        3040.9759550552735, 3083.30215538223],
                       [np.NaN, Timestamp('2015-08-18 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5904.897648555881,
                        5679.257338080869, 5354.330803559769, 5830.451960780738, 2952.9625981917875, 5402.0554633954225,
                        5386.823457011879, 5679.257338080869],
                       [np.NaN, Timestamp('2015-08-19 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61.75757588908932,
                        57.76277168694692, 55.67844829382184, 58.521223881200534, 1939.0437967423632,
                        58.015247888209785, 55.886880633134346, 58.16704068610701],
                       [np.NaN, Timestamp('2015-08-19 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101.77204056552515,
                        108.89715453810228, 97.41183669900776, 91.98170549072704, 2941.806694887742, 97.51685080365465,
                        98.56036848291721, 108.89715453810228],
                       [np.NaN, Timestamp('2015-08-20 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3831.145160410588,
                        1393.5084848260904, 1508.8606824762637, 3448.4476421495315, 3561.7997928130167,
                        3783.6599877694975, 1405.0437045911076, 3482.453287348577],
                       [np.NaN, Timestamp('2015-08-20 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6274.53522103407,
                        2606.986486377222, 2620.5989921217224, 5387.590890002401, 5403.3270056274705, 6316.905909061486,
                        2608.347736951672, 5392.311724689922],
                       [np.NaN, Timestamp('2015-08-21 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3022.089661757105,
                        1349.5054666577794, 1507.1273890879338, 3197.8957085570414, 1965.1576066788466,
                        2801.7730084121195, 1365.267658900795, 2216.1422271988286],
                       [np.NaN, Timestamp('2015-08-21 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4949.622916034837,
                        2524.6927764489683, 2617.589442795327, 4996.1885534858075, 2981.4181174953937,
                        4677.797093749239, 2533.9824430836043, 3490.3318103715474],
                       [np.NaN, Timestamp('2015-08-22 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3342.956892410517,
                        3231.3687943068826, 1730.7510543886567, 3718.022926806839, 2917.411122978246,
                        1776.1355835177699, 2118.5182453559128, 3231.3687943068826],
                       [np.NaN, Timestamp('2015-08-22 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5475.076290829595,
                        6044.122153266125, 3005.8713434839738, 5808.71075433203, 4425.86902509952, 2965.6536599308834,
                        3403.718269481474, 5740.29707228791],
                       [np.NaN, Timestamp('2015-08-23 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47.75094640390013,
                        21.113507252988065, 43.15699817702642, 56.01383890012828, 47.953675396427805,
                        39.273164594392874, 39.273164594392874, 43.15699817702642],
                       [np.NaN, Timestamp('2015-08-23 00:00:00'), 1, 1.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78.83473183036728,
                        40.356312069617715, 75.67061157335162, 88.06476768838507, 73.25667602858779, 66.22983448705439,
                        68.33788694951441, 75.67061157335162],
                       [np.NaN, Timestamp('2015-08-24 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3229.4760515345547,
                        3051.666516666004, 2751.1790823394376, 3002.203716773284, 3162.641034139643, 1601.323673775545,
                        2781.227825772094, 3051.666516666004],
                       [np.NaN, Timestamp('2015-08-24 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5289.239642159073,
                        5708.045953832278, 4777.659377079967, 4690.486251677492, 4797.8524955573885, 2673.832148591992,
                        4870.698034755198, 5289.239642159073],
                       [np.NaN, Timestamp('2015-08-25 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3571.5581384656753,
                        3007.9844903713974, 3054.5756362125744, 3697.0379379913657, 3166.726306922828,
                        3205.4853123141365, 3012.643604955515, 3178.3540085402205],
                       [np.NaN, Timestamp('2015-08-25 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5849.434544794513,
                        5626.352557547123, 5304.452417708428, 5775.928833488785, 4804.0493495237715, 5351.732495773718,
                        5336.642431692298, 5626.352557547123],
                       [np.NaN, Timestamp('2015-08-26 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61.75757588908926,
                        57.76277168694692, 55.67844829382184, 2037.4796171149671, 52.13944860093522, 58.01524788820968,
                        55.886880633134346, 57.76277168694692],
                       [np.NaN, Timestamp('2015-08-26 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101.77204056552515,
                        108.8971545381022, 97.41183669900776, 3183.4323595519963, 79.60597671457741, 97.51685080365448,
                        98.56036848291721, 108.8971545381022],
                       [np.NaN, Timestamp('2015-08-27 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2834.91878439326,
                        2247.678256617356, 2682.0435382413425, 1999.8186627563275, 2965.529472243482, 2559.568643151879,
                        2291.1147847797547, 2682.0435382413425],
                       [np.NaN, Timestamp('2015-08-27 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4643.111188508626,
                        4204.4405328338435, 4657.61805483685, 3124.599903860827, 4498.8586146141815, 4273.474275999895,
                        4249.758285034144, 4612.3003026365495],
                       [np.NaN, Timestamp('2015-08-28 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2267.8685546042598,
                        1587.2549220059504, 1815.669687416791, 2502.9810981660353, 2209.197506465022,
                        1921.8855021915979, 1610.0963985470346, 2008.079103473625],
                       [np.NaN, Timestamp('2015-08-28 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3714.5076152674046,
                        2969.3278385073404, 3153.3171345710034, 3910.6203908830903, 3351.596487755074,
                        3208.9606611966155, 2987.726768113707, 3251.7514091641533],
                       [np.NaN, Timestamp('2015-08-29 00:00:00'), 1, 0.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2459.7102107197943,
                        1983.898963610751, 2162.0931954783928, 2853.559702290816, 2415.417514796829, 2074.411765061338,
                        2074.411765061338, 2176.7134899819853],
                       [np.NaN, Timestamp('2015-08-29 00:00:00'), 1, 1.0, 0.0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4028.6682275145577,
                        3711.1249029664828, 3754.8186705220496, 4458.280442113593, 3664.406756346775,
                        3463.5797235657355, 3715.494279722039, 3754.8186705220496],
                       [np.NaN, Timestamp('2015-08-30 00:00:00'), 1, 0.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33.630812412125586,
                        26.79398164469549, 27.264752630830788, 41.251105904309, 38.13969244324033, 22.167425003708388,
                        26.84105874330902, 27.264752630830788],
                       [np.NaN, Timestamp('2015-08-30 00:00:00'), 1, 1.0, 0.0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55.71154769148478,
                        50.979840438921514, 48.07661208054584, 65.00300917355297, 58.3700766710633, 37.67444150905918,
                        48.36693491638341, 50.979840438921514]])
    df.index = list(df.index + 1)
    df.index.name = "forecast_index"
    df.columns = ['Sales', 'Date', 'Store', 'Promo', 'SchoolHoliday', 'LastDayOfMonth',
                  'StateHoliday_z', 'Weekday_6.0', 'Weekday_3.0', 'Weekday_0.0',
                  'Weekday_1.0', 'Weekday_2.0', 'Weekday_5.0', 'Weekday_4.0',
                  'DayOfMonth_19.0', 'DayOfMonth_23.0', 'DayOfMonth_27.0',
                  'DayOfMonth_28.0', 'DayOfMonth_29.0', 'DayOfMonth_7.0',
                  'DayOfMonth_8.0', 'DayOfMonth_11.0', 'DayOfMonth_12.0',
                  'DayOfMonth_14.0', 'DayOfMonth_16.0', 'DayOfMonth_17.0',
                  'DayOfMonth_20.0', 'DayOfMonth_21.0', 'DayOfMonth_22.0',
                  'DayOfMonth_24.0', 'DayOfMonth_25.0', 'DayOfMonth_26.0',
                  'DayOfMonth_30.0', 'DayOfMonth_31.0', 'DayOfMonth_9.0',
                  'DayOfMonth_10.0', 'DayOfMonth_13.0', 'DayOfMonth_15.0',
                  'DayOfMonth_18.0', 'DayOfMonth_1.0', 'DayOfMonth_6.0', 'DayOfMonth_2.0',
                  'DayOfMonth_3.0', 'DayOfMonth_4.0', 'DayOfMonth_5.0', 'Sales_h_2_pred',
                  'Sales_h_2_pred_b_11', 'Sales_h_2_pred_b_12', 'Sales_h_2_pred_b_13',
                  'Sales_h_2_pred_b_14', 'Sales_h_2_pred_b_15', 'Sales_h_2_pred_c_90',
                  'Sales_h_2_pred_c_10']
    return df


@pytest.fixture()
def test_fd_1():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:07"],
            "validate_start": "1970-01-01 00:00:01",
            "validate_end": "1970-01-01 00:00:09",
            "forecast_start": "1970-01-01 00:00:05",
            "forecast_end": "1970-01-01 00:00:14",
            "forecast_freq": "S",
            "confidence_intervals": [90],
            "bootstrap_sample": 5,
            "bin_features": {"b": [5, 10, 15]},
            "scenarios": [
                {"feature": "b", "values": [[0, 5]], "start": "1970-01-01 00:00:09", "end": "1970-01-01 00:00:14"}],
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
            "model": "LinearRegression",
        }
    }


@pytest.fixture()
def test_fd_retail():
    return {
        "forecast_definition": {
            "time_index": "Date",
            "target": "Sales",
            "include_features": ["Store", "Promo", "StateHoliday", "SchoolHoliday", "Weekday",
                                 "LastDayOfMonth", "DayOfMonth"],
            "time_validation_splits": ["2015-07-18"],
            "forecast_end": "2015-08-30",
            "bootstrap_sample": 5,
            "signal_dimensions": ["Store"],
            "time_horizons": [2],
            "forecast_freq": "D",
            "encode_features": ["StateHoliday", "Weekday", "DayOfMonth"],
            "scenarios": [{"feature": "Promo", "values": [0, 1], "start": "2015-08-01", "end": "2016-01-01"},
                          {"feature": "StateHoliday", "values": ["z"], "start": "2015-08-01", "end": "2016-01-01"},
                          {"feature": "SchoolHoliday", "values": [0], "start": "2015-08-01", "end": "2016-01-01"}],
            "dataset_directory": "dataset/retail/sales2",
            "link_function": "log",
            "confidence_intervals": [90, 10],
            "joins": [
                {
                    "dataset_directory": "dataset/time",
                    "join_on": ["Date", "Date"],
                    "as": "time"
                },
                {
                    "dataset_directory": "dataset/retail/store",
                    "join_on": ["Store", "Store"],
                    "as": "store"
                }
            ]
        }
    }


@pytest.fixture()
def test_fd_retail_2(test_bucket, test_fd_retail):
    test_fd = test_fd_retail
    test_fd["forecast_definition"].update(
        {"dataset_directory": "{}/{}".format(test_bucket, test_fd["forecast_definition"]["dataset_directory"])})
    for join in test_fd["forecast_definition"]["joins"]:
        join.update({"dataset_directory": "{}/{}".format(test_bucket, join["dataset_directory"])})
    return test_fd


@pytest.fixture()
def test_fd_2():
    return {
        "forecast_definition": {
            "time_index": "a",
            "target": "c",
            "time_validation_splits": ["1970-01-01 00:00:08"],
            "time_horizons": [1],
            "dataset_directory": "divina-test/dataset/test1",
            "joins": [
                {
                    "dataset_directory": "dataset/test2",
                    "join_on": ("a", "a"),
                    "as": "test2",
                }
            ],
        }
    }


@pytest.fixture()
def test_fd_3(test_bucket, test_fd_1):
    test_fd = test_fd_1
    test_fd["forecast_definition"].update({"dataset_directory": "{}/dataset/test1".format(test_bucket)})
    return test_fd


@pytest.fixture()
def test_composite_dataset_1():
    df = pd.DataFrame(
        [[Timestamp("1970-01-01 00:00:01"), 8.0, 12.0, 2.0, 3.0],
         [Timestamp("1970-01-01 00:00:04"), 20.0, 24.0, np.NaN, 6.0],
         [Timestamp("1970-01-01 00:00:05"), 15.0, 18.0, np.NaN, np.NaN],
         [Timestamp("1970-01-01 00:00:06"), 5.0, 6.0, np.NaN, np.NaN],
         [Timestamp("1970-01-01 00:00:07"), 48.0, 54.0, 8.0, np.NaN],
         [Timestamp("1970-01-01 00:00:10"), 77.0, 84.0, np.NaN, np.NaN]]
    )
    df.columns = ["a", "b", "c", "e", "f"]
    return df


@pytest.fixture()
def test_df_1():
    df = (
        pd.DataFrame(
            [
                [Timestamp("1970-01-01 00:00:01"), 2.0, 3.0],
                [Timestamp("1970-01-01 00:00:04"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:05"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:06"), 5.0, 6.0],
                [Timestamp("1970-01-01 00:00:07"), 8.0, 9],
                [Timestamp("1970-01-01 00:00:10"), 11.0, 12.0],
            ]
        )
            .sample(25, replace=True, random_state=11)
            .reset_index(drop=True)
    )
    df.columns = ["a", "b", "c"]
    return df


@pytest.fixture()
def test_df_2():
    df = pd.DataFrame(
        [[Timestamp("1970-01-01 00:00:01"), 2.0, 3.0], [Timestamp("1970-01-01 00:00:04"), np.NaN, 6.0],
         [Timestamp("1970-01-01 00:00:07"), 8.0, np.NaN], [np.NaN, 11.0, 12.0]]
    )
    df.columns = ["a", "e", "f"]
    return df


@pytest.fixture()
def test_df_3():
    df = pd.DataFrame([[1, 2, 3], [4, "a", 6], [7, 8, "b"], ["c", 11, 12]]).astype(
        "str"
    )
    df.columns = ["a", "b", "c"]
    return df


@pytest.fixture()
def test_df_retail_sales():
    df = pd.DataFrame([[1, 5, "2015-07-31", 5263, 555, 1, 1, "z", 1],
                       [1, 4, "2015-07-30", 5020, 546, 1, 1, "z", 1],
                       [1, 3, "2015-07-29", 4782, 523, 1, 1, "z", 1],
                       [1, 2, "2015-07-28", 5011, 560, 1, 1, "z", 1],
                       [1, 1, "2015-07-27", 6102, 612, 1, 1, "z", 1],
                       [1, 7, "2015-07-26", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-25", 4364, 500, 1, 0, "z", 0],
                       [1, 5, "2015-07-24", 3706, 459, 1, 0, "z", 0],
                       [1, 4, "2015-07-23", 3769, 503, 1, 0, "z", 0],
                       [1, 3, "2015-07-22", 3464, 463, 1, 0, "z", 0],
                       [1, 2, "2015-07-21", 3558, 469, 1, 0, "z", 0],
                       [1, 1, "2015-07-20", 4395, 526, 1, 0, "z", 0],
                       [1, 7, "2015-07-19", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-18", 4406, 512, 1, 0, "z", 0],
                       [1, 5, "2015-07-17", 4852, 519, 1, 1, "z", 0],
                       [1, 4, "2015-07-16", 4427, 517, 1, 1, "z", 0],
                       [1, 3, "2015-07-15", 4767, 550, 1, 1, "z", 0],
                       [1, 2, "2015-07-14", 5042, 544, 1, 1, "z", 0],
                       [1, 1, "2015-07-13", 5054, 553, 1, 1, "z", 0],
                       [1, 7, "2015-07-12", 0, 0, 0, 0, "z", 0],
                       [1, 6, "2015-07-11", 3530, 441, 1, 0, "z", 0],
                       [1, 5, "2015-07-10", 3808, 449, 1, 0, "z", 0],
                       [1, 4, "2015-07-09", 3897, 480, 1, 0, "z", 0],
                       [1, 3, "2015-07-08", 3797, 485, 1, 0, "z", 0],
                       [1, 2, "2015-07-07", 3650, 485, 1, 0, "z", 0]])
    df.columns = ["Store", "DayOfWeek", "Date", "Sales", "Customers", "Open", "Promo",
                  "StateHoliday", "SchoolHoliday"]
    return df


@pytest.fixture()
def test_df_retail_stores():
    df = pd.DataFrame([[1.0, "c", "a", 1270.0, 9.0, 2008, 0.0, np.NaN, np.NaN, None]])
    df.columns = ["Store", "StoreType", "Assortment", "CompetitionDistance",
                  "CompetitionOpenSinceMonth", "CompetitionOpenSinceYear", "Promo2",
                  "Promo2SinceWeek", "Promo2SinceYear", "PromoInterval"]
    return df


@pytest.fixture()
def test_df_retail_time():
    df = pd.DataFrame([[Timestamp('2015-07-01 00:00:00'), 7, 1, 2015, 2, False, 'None', 27, 78708, 0, 1],
                       [Timestamp('2015-07-02 00:00:00'), 7, 2, 2015, 3, False, 'None', 27, 78709, 0, 2],
                       [Timestamp('2015-07-03 00:00:00'), 7, 3, 2015, 4, True, 'July 4th', 27, 78710, 0, 3],
                       [Timestamp('2015-07-04 00:00:00'), 7, 4, 2015, 5, False, 'None', 27, 78711, 0, 4],
                       [Timestamp('2015-07-05 00:00:00'), 7, 5, 2015, 6, False, 'None', 27, 78712, 0, 5],
                       [Timestamp('2015-07-06 00:00:00'), 7, 6, 2015, 0, False, 'None', 28, 78713, 0, 6],
                       [Timestamp('2015-07-07 00:00:00'), 7, 7, 2015, 1, False, 'None', 28, 78714, 0, 7],
                       [Timestamp('2015-07-08 00:00:00'), 7, 8, 2015, 2, False, 'None', 28, 78715, 0, 8],
                       [Timestamp('2015-07-09 00:00:00'), 7, 9, 2015, 3, False, 'None', 28, 78716, 0, 9],
                       [Timestamp('2015-07-10 00:00:00'), 7, 10, 2015, 4, False, 'None', 28, 78717, 0, 10],
                       [Timestamp('2015-07-11 00:00:00'), 7, 11, 2015, 5, False, 'None', 28, 78718, 0, 11],
                       [Timestamp('2015-07-12 00:00:00'), 7, 12, 2015, 6, False, 'None', 28, 78719, 0, 12],
                       [Timestamp('2015-07-13 00:00:00'), 7, 13, 2015, 0, False, 'None', 29, 78720, 0, 13],
                       [Timestamp('2015-07-14 00:00:00'), 7, 14, 2015, 1, False, 'None', 29, 78721, 0, 14],
                       [Timestamp('2015-07-15 00:00:00'), 7, 15, 2015, 2, False, 'None', 29, 78722, 0, 15],
                       [Timestamp('2015-07-16 00:00:00'), 7, 16, 2015, 3, False, 'None', 29, 78723, 0, 16],
                       [Timestamp('2015-07-17 00:00:00'), 7, 17, 2015, 4, False, 'None', 29, 78724, 0, 17],
                       [Timestamp('2015-07-18 00:00:00'), 7, 18, 2015, 5, False, 'None', 29, 78725, 0, 18],
                       [Timestamp('2015-07-19 00:00:00'), 7, 19, 2015, 6, False, 'None', 29, 78726, 0, 19],
                       [Timestamp('2015-07-20 00:00:00'), 7, 20, 2015, 0, False, 'None', 30, 78727, 0, 20],
                       [Timestamp('2015-07-21 00:00:00'), 7, 21, 2015, 1, False, 'None', 30, 78728, 0, 21],
                       [Timestamp('2015-07-22 00:00:00'), 7, 22, 2015, 2, False, 'None', 30, 78729, 0, 22],
                       [Timestamp('2015-07-23 00:00:00'), 7, 23, 2015, 3, False, 'None', 30, 78730, 0, 23],
                       [Timestamp('2015-07-24 00:00:00'), 7, 24, 2015, 4, False, 'None', 30, 78731, 0, 24],
                       [Timestamp('2015-07-25 00:00:00'), 7, 25, 2015, 5, False, 'None', 30, 78732, 0, 25],
                       [Timestamp('2015-07-26 00:00:00'), 7, 26, 2015, 6, False, 'None', 30, 78733, 0, 26],
                       [Timestamp('2015-07-27 00:00:00'), 7, 27, 2015, 0, False, 'None', 31, 78734, 0, 27],
                       [Timestamp('2015-07-28 00:00:00'), 7, 28, 2015, 1, False, 'None', 31, 78735, 0, 28],
                       [Timestamp('2015-07-29 00:00:00'), 7, 29, 2015, 2, False, 'None', 31, 78736, 0, 29],
                       [Timestamp('2015-07-30 00:00:00'), 7, 30, 2015, 3, False, 'None', 31, 78737, 0, 30],
                       [Timestamp('2015-07-31 00:00:00'), 7, 31, 2015, 4, False, 'None', 31, 78738, 1, 31],
                       [Timestamp('2015-08-01 00:00:00'), 8, 1, 2015, 5, False, 'None', 31, 78739, 0, 1],
                       [Timestamp('2015-08-02 00:00:00'), 8, 2, 2015, 6, False, 'None', 31, 78740, 0, 2],
                       [Timestamp('2015-08-03 00:00:00'), 8, 3, 2015, 0, False, 'None', 32, 78741, 0, 3],
                       [Timestamp('2015-08-04 00:00:00'), 8, 4, 2015, 1, False, 'None', 32, 78742, 0, 4],
                       [Timestamp('2015-08-05 00:00:00'), 8, 5, 2015, 2, False, 'None', 32, 78743, 0, 5],
                       [Timestamp('2015-08-06 00:00:00'), 8, 6, 2015, 3, False, 'None', 32, 78744, 0, 6],
                       [Timestamp('2015-08-07 00:00:00'), 8, 7, 2015, 4, False, 'None', 32, 78745, 0, 7],
                       [Timestamp('2015-08-08 00:00:00'), 8, 8, 2015, 5, False, 'None', 32, 78746, 0, 8],
                       [Timestamp('2015-08-09 00:00:00'), 8, 9, 2015, 6, False, 'None', 32, 78747, 0, 9],
                       [Timestamp('2015-08-10 00:00:00'), 8, 10, 2015, 0, False, 'None', 33, 78748, 0, 10],
                       [Timestamp('2015-08-11 00:00:00'), 8, 11, 2015, 1, False, 'None', 33, 78749, 0, 11],
                       [Timestamp('2015-08-12 00:00:00'), 8, 12, 2015, 2, False, 'None', 33, 78750, 0, 12],
                       [Timestamp('2015-08-13 00:00:00'), 8, 13, 2015, 3, False, 'None', 33, 78751, 0, 13],
                       [Timestamp('2015-08-14 00:00:00'), 8, 14, 2015, 4, False, 'None', 33, 78752, 0, 14],
                       [Timestamp('2015-08-15 00:00:00'), 8, 15, 2015, 5, False, 'None', 33, 78753, 0, 15],
                       [Timestamp('2015-08-16 00:00:00'), 8, 16, 2015, 6, False, 'None', 33, 78754, 0, 16],
                       [Timestamp('2015-08-17 00:00:00'), 8, 17, 2015, 0, False, 'None', 34, 78755, 0, 17],
                       [Timestamp('2015-08-18 00:00:00'), 8, 18, 2015, 1, False, 'None', 34, 78756, 0, 18],
                       [Timestamp('2015-08-19 00:00:00'), 8, 19, 2015, 2, False, 'None', 34, 78757, 0, 19],
                       [Timestamp('2015-08-20 00:00:00'), 8, 20, 2015, 3, False, 'None', 34, 78758, 0, 20],
                       [Timestamp('2015-08-21 00:00:00'), 8, 21, 2015, 4, False, 'None', 34, 78759, 0, 21],
                       [Timestamp('2015-08-22 00:00:00'), 8, 22, 2015, 5, False, 'None', 34, 78760, 0, 22],
                       [Timestamp('2015-08-23 00:00:00'), 8, 23, 2015, 6, False, 'None', 34, 78761, 0, 23],
                       [Timestamp('2015-08-24 00:00:00'), 8, 24, 2015, 0, False, 'None', 35, 78762, 0, 24],
                       [Timestamp('2015-08-25 00:00:00'), 8, 25, 2015, 1, False, 'None', 35, 78763, 0, 25],
                       [Timestamp('2015-08-26 00:00:00'), 8, 26, 2015, 2, False, 'None', 35, 78764, 0, 26],
                       [Timestamp('2015-08-27 00:00:00'), 8, 27, 2015, 3, False, 'None', 35, 78765, 0, 27],
                       [Timestamp('2015-08-28 00:00:00'), 8, 28, 2015, 4, False, 'None', 35, 78766, 0, 28],
                       [Timestamp('2015-08-29 00:00:00'), 8, 29, 2015, 5, False, 'None', 35, 78767, 0, 29],
                       [Timestamp('2015-08-30 00:00:00'), 8, 30, 2015, 6, False, 'None', 35, 78768, 0, 30],
                       [Timestamp('2015-08-31 00:00:00'), 8, 31, 2015, 0, False, 'None', 36, 78769, 1, 31]])
    df.columns = ['Date', 'Month', 'Day', 'Year', 'Weekday', 'Holiday', 'HolidayType', 'WeekOfYear', 'T',
                  'LastDayOfMonth', 'DayOfMonth']
    return df
